[{"/Users/zachary/capstone/madsense-app/src/index.js":"1","/Users/zachary/capstone/madsense-app/src/App.js":"2","/Users/zachary/capstone/madsense-app/src/ResultsPage.js":"3","/Users/zachary/capstone/madsense-app/src/MeasurementPage.js":"4","/Users/zachary/capstone/madsense-app/src/SensorTimeGraph.js":"5","/Users/zachary/capstone/madsense-app/src/btUtils.js":"6","/Users/zachary/capstone/madsense-app/src/FinalResultsPage.js":"7","/Users/zachary/capstone/madsense-app/src/VolumeTimeGraph.js":"8"},{"size":432,"mtime":1649857476086,"results":"9","hashOfConfig":"10"},{"size":3515,"mtime":1650380768452,"results":"11","hashOfConfig":"10"},{"size":2438,"mtime":1649861708538,"results":"12","hashOfConfig":"10"},{"size":5680,"mtime":1650245335446,"results":"13","hashOfConfig":"10"},{"size":1271,"mtime":1649111457740,"results":"14","hashOfConfig":"10"},{"size":6131,"mtime":1649381285463,"results":"15","hashOfConfig":"10"},{"size":2326,"mtime":1650228556640,"results":"16","hashOfConfig":"10"},{"size":3757,"mtime":1649870310799,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"brdxjn",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},"/Users/zachary/capstone/madsense-app/src/index.js",[],[],["48","49"],"/Users/zachary/capstone/madsense-app/src/App.js",["50"],[],"/Users/zachary/capstone/madsense-app/src/ResultsPage.js",[],[],["51","52"],"/Users/zachary/capstone/madsense-app/src/MeasurementPage.js",["53","54","55"],[],"/Users/zachary/capstone/madsense-app/src/SensorTimeGraph.js",[],[],"/Users/zachary/capstone/madsense-app/src/btUtils.js",[],[],"/Users/zachary/capstone/madsense-app/src/FinalResultsPage.js",["56","57","58","59","60","61"],[],"import Box from \"@mui/system/Box\";\nimport {Stack} from \"@mui/material\";\nimport {ShapeGraph, VolumeTimeGraph} from \"./VolumeTimeGraph\";\nimport {\n  Toolbar,\n  List,\n  ListItem,\n  ListItemText,\n  Drawer,\n  Divider,\n  Typography,\n} from \"@mui/material\";\nimport React from \"react\";\n\nfunction splitMeasurements(measurements) {\n    let res = [];\n    if (measurements.vols.length <= 0) {\n        return res;\n    }\n    res.push(\n        measurements.vols.map((e, j) => {\n        return { val: measurements.vols[j], date: measurements.dates[j] };\n        })\n    );\n    console.log(\"to plot: \", res);\n    return res;\n}\n\nfunction scrollIntoViewWithOffset(selector, offset = 64) {\n  window.scrollTo({\n    behavior: \"smooth\",\n    top:\n      document.querySelector(selector).getBoundingClientRect().top -\n      document.body.getBoundingClientRect().top -\n      offset,\n  });\n}\n\nexport default class FinalResultsPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.graphRefs = [];\n    this.state = {\n      graphRefs: [],\n    };\n  }\n\n  render() {\n    if (!(this.props.measurements.vols.length > 0)) {\n      return <Typography align=\"center\">No volume data to display. Take a measurement first</Typography>;\n    }\n    const calculatedVols = splitMeasurements(this.props.measurements);\n    return (\n      <Box sx={{ display: \"flex\" }}>\n        <Stack>\n            <Box component=\"main\" sx={{ flexGrow: 1, p: 3 }}>\n            {calculatedVols.map((e, i) => (\n                <div\n                id={`graph-${i}`}\n                key={i}\n                ref={(el) => (this.graphRefs[i] = el)}\n                >\n                <VolumeTimeGraph data={e} title={'Joint Volume Progression'} />\n                <Divider />\n                </div>\n            ))}\n            </Box>\n            <Divider />\n            <Box sx={{ flexGrow: 1, p: 3 }}>\n                {calculatedVols.map((e, i) => (\n                    <div\n                    id={`graph-${i}`}\n                    key={i}\n                    ref={(el) => (this.graphRefs[i] = el)}\n                    >\n                    <ShapeGraph data={this.props.measurements.lens} title={'Current Joint Shape'} />\n                        <Divider />\n                    </div>\n                ))}        \n            </Box>\n        </Stack>\n    </Box>\n    );\n  }\n}\n",["62","63"],"/Users/zachary/capstone/madsense-app/src/VolumeTimeGraph.js",["64","65"],[],"import { Typography } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  Label,\n} from \"recharts\";\n\nfunction getMin(data) {\n  let local_min = Infinity;\n  for (let i = 0; i < data.length; i++) {\n    if (data[i].val < local_min) {\n      local_min = data[i].val\n    }\n  }\n  return Math.round(local_min * 0.95 / 100) * 100\n}\n\nfunction getMax(data) {\n  let local_max = 0;\n  for (let i = 0; i < data.length; i++) {\n    if (data[i].val > local_max) {\n      local_max = data[i].val\n    }\n  }\n  return Math.round(local_max * 1.05 / 100) * 100\n}\n\nexport function VolumeTimeGraph(props) {\n  let minRange = getMin(props.data);\n  let maxRange = getMax(props.data);\n  console.log(\"data: \", props.data)\n  \n  return (\n    <Box sx={{ py: 5 }}>\n      <Box sx={{ width: 500, marginLeft: 30 }}>\n        <Typography variant=\"h5\" align=\"center\">\n          {props.title}\n        </Typography>\n      </Box>\n      <LineChart\n        width={900}\n        height={450}\n        data={props.data}\n        margin={{\n          top: 10,\n          right: 20,\n          left: 20,\n          bottom: 80,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"1 1\" />\n        <XAxis \n          dataKey=\"date\"\n          angle={-45}\n          dx={-25}\n          dy={30}\n          >\n          <Label \n            position=\"bottom\" \n            style={{ textAnchor: \"middle\" }}\n            dy = {55}\n          >\n            Date\n          </Label>\n        </XAxis>\n        <YAxis \n          unit=' mL' \n          type=\"number\" \n          domain={[minRange, maxRange]}\n          tickMargin={10}\n          tickCount={3}\n          width={100} \n          >\n          <Label angle={270} position=\"left\" style={{ textAnchor: \"middle\" }}>\n            Volume\n          </Label>\n        </YAxis>\n        <Tooltip />\n        <Legend />\n        <Line\n          type=\"monotone\"\n          dataKey=\"val\"\n          legendType=\"none\"\n          stroke=\"#8884d8\"\n          activeDot={{ r: 8 }}\n        />\n      </LineChart>\n    </Box>\n  );\n}\n\nexport function ShapeGraph(props) {\n  let recentSensorLengths = [];\n  if (props.data.length > 0) {\n    recentSensorLengths = props.data[props.data.length - 1]\n  } else { return; }\n  let minRange = getMin(props.data[props.data.length - 1]);\n  let maxRange = getMax(props.data[props.data.length - 1]);\n  let data = recentSensorLengths.map((e,j) => {\n    return { val: e, sensor: (j+1) };\n   });\n  console.log(data);\n  return (\n    <Box sx={{ py: 5 }}>\n      <Box sx={{ width: 500, marginLeft: 30 }}>\n        <Typography variant=\"h5\" align=\"center\">\n          {props.title}\n        </Typography>\n      </Box>\n      <LineChart\n        width={900}\n        height={450}\n        data={data}\n        margin={{\n          top: 20,\n          right: 20,\n          left: 20,\n          bottom: 80,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"1 1\" />\n        <XAxis \n          dataKey=\"sensor\"\n          >\n          <Label \n            position=\"bottom\" \n            style={{ textAnchor: \"middle\" }}\n            dy = {10}\n          >\n            Sensor\n          </Label>\n        </XAxis>\n        <YAxis \n          unit=' cm' \n          type=\"number\" \n          //domain={[minRange, maxRange]}\n          tickMargin={10}\n          tickCount={3}\n          width={100} \n          >\n          <Label angle={270} position=\"left\" style={{ textAnchor: \"middle\" }}>\n            Length\n          </Label>\n        </YAxis>\n        <Tooltip />\n        <Legend />\n        <Line\n          type=\"monotone\"\n          dataKey=\"val\"\n          legendType=\"none\"\n          stroke=\"#8884d8\"\n          activeDot={{ r: 8 }}\n        />\n      </LineChart>\n    </Box>\n  );\n}",["66","67"],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":93,"column":13,"nodeType":"74","endLine":93,"endColumn":40},{"ruleId":"68","replacedBy":"75"},{"ruleId":"70","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":1,"column":10,"nodeType":"79","messageId":"80","endLine":1,"endColumn":20},{"ruleId":"77","severity":1,"message":"81","line":2,"column":42,"nodeType":"79","messageId":"80","endLine":2,"endColumn":51},{"ruleId":"77","severity":1,"message":"82","line":2,"column":53,"nodeType":"79","messageId":"80","endLine":2,"endColumn":58},{"ruleId":"77","severity":1,"message":"83","line":5,"column":3,"nodeType":"79","messageId":"80","endLine":5,"endColumn":10},{"ruleId":"77","severity":1,"message":"84","line":6,"column":3,"nodeType":"79","messageId":"80","endLine":6,"endColumn":7},{"ruleId":"77","severity":1,"message":"85","line":7,"column":3,"nodeType":"79","messageId":"80","endLine":7,"endColumn":11},{"ruleId":"77","severity":1,"message":"86","line":8,"column":3,"nodeType":"79","messageId":"80","endLine":8,"endColumn":15},{"ruleId":"77","severity":1,"message":"87","line":9,"column":3,"nodeType":"79","messageId":"80","endLine":9,"endColumn":9},{"ruleId":"77","severity":1,"message":"88","line":29,"column":10,"nodeType":"79","messageId":"80","endLine":29,"endColumn":34},{"ruleId":"68","replacedBy":"89"},{"ruleId":"70","replacedBy":"90"},{"ruleId":"77","severity":1,"message":"91","line":104,"column":7,"nodeType":"79","messageId":"80","endLine":104,"endColumn":15},{"ruleId":"77","severity":1,"message":"92","line":105,"column":7,"nodeType":"79","messageId":"80","endLine":105,"endColumn":15},{"ruleId":"68","replacedBy":"93"},{"ruleId":"70","replacedBy":"94"},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["95"],["96"],"no-unused-vars","'ClassNames' is defined but never used.","Identifier","unusedVar","'TextField' is defined but never used.","'Stack' is defined but never used.","'Toolbar' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'Drawer' is defined but never used.","'scrollIntoViewWithOffset' is defined but never used.",["95"],["96"],"'minRange' is assigned a value but never used.","'maxRange' is assigned a value but never used.",["95"],["96"],"no-global-assign","no-unsafe-negation"]