{"ast":null,"code":"// bluetooth code from p5ble\nexport class p5ble {\n  constructor() {\n    this.device = null;\n    this.server = null;\n    this.service = null;\n    this.characteristics = [];\n    this.handleNotifications = null;\n  }\n\n  connect(serviceUuid, callback) {\n    console.log('Requesting Bluetooth Device...');\n    return callCallback(navigator.bluetooth.requestDevice({\n      filters: [{\n        services: [serviceUuid]\n      }]\n    }).then(device => {\n      this.device = device;\n      console.log(`Got device ${device.name}`);\n      return device.gatt.connect();\n    }).then(server => {\n      this.server = server;\n      console.log('Getting Service...');\n      return server.getPrimaryService(serviceUuid);\n    }).then(service => {\n      this.service = service;\n      console.log('Getting Characteristics...');\n      return service.getCharacteristics();\n    }).then(characteristics => {\n      this.characteristics = characteristics;\n      console.log('Got Characteristic');\n      return characteristics;\n    }).catch(error => {\n      console.error(`Error: ${error}`);\n    }), callback);\n  }\n\n  async read(characteristic, dataTypeOrcallback, cb) {\n    let callback;\n    let dataType;\n\n    if (typeof dataTypeOrcallback === 'function') {\n      callback = dataTypeOrcallback;\n    } else if (typeof dataTypeOrcallback === 'string') {\n      dataType = dataTypeOrcallback;\n    }\n\n    if (typeof cb === 'function') {\n      callback = cb;\n    }\n\n    if (!characteristic || !characteristic.uuid) console.error('The characteristic does not exist.');\n    const validChar = this.characteristics.find(char => char.uuid === characteristic.uuid);\n    if (!validChar) return console.error('The characteristic does not exist.');\n    return callCallback(characteristic.readValue().then(value => parseData(value, dataType)), callback);\n  }\n\n  write(characteristic, inputValue) {\n    if (!characteristic || !characteristic.uuid) console.error('The characteristic does not exist.');\n    const validChar = this.characteristics.find(char => char.uuid === characteristic.uuid);\n    if (!validChar) return console.error('The characteristic does not exist.');\n    let bufferToSend;\n\n    if (typeof inputValue === 'string') {\n      const encoder = new TextEncoder('utf-8');\n      bufferToSend = encoder.encode(inputValue);\n    } else bufferToSend = Uint8Array.of(inputValue);\n\n    console.log(`Writing ${inputValue} to Characteristic...`);\n    return characteristic.writeValue(bufferToSend);\n  }\n\n  async startNotifications(characteristic, handleNotifications, dataType) {\n    if (!characteristic || !characteristic.uuid) console.error('The characteristic does not exist.');\n    const validChar = this.characteristics.find(char => char.uuid === characteristic.uuid);\n    if (!validChar) return console.error('The characteristic does not exist.');\n    await characteristic.startNotifications();\n    console.log('> Notifications started');\n\n    this.handleNotifications = event => {\n      const {\n        value\n      } = event.target;\n      const parsedData = parseData(value, dataType);\n      handleNotifications(parsedData);\n    };\n\n    return characteristic.addEventListener('characteristicvaluechanged', this.handleNotifications);\n  }\n\n  async stopNotifications(characteristic) {\n    if (!characteristic || !characteristic.uuid) console.error('The characteristic does not exist.');\n    const validChar = this.characteristics.find(char => char.uuid === characteristic.uuid);\n    if (!validChar) return console.error('The characteristic does not exist.');\n\n    try {\n      await characteristic.stopNotifications();\n\n      if (this.handleNotifications) {\n        console.log('> Notifications stopped');\n        return characteristic.removeEventListener('characteristicvaluechanged', this.handleNotifications);\n      }\n\n      return console.log('> Notifications stopped');\n    } catch (error) {\n      return console.error(`Error: ${error}`);\n    }\n  }\n\n  disconnect() {\n    if (!this.device) return;\n    console.log('Disconnecting from Bluetooth Device...');\n\n    if (this.device.gatt.connected) {\n      this.device.gatt.disconnect();\n    } else {\n      console.log('> Bluetooth Device is already disconnected');\n    }\n  }\n\n  onDisconnected(handleDisconnected) {\n    if (!this.device) return console.error('There is no device connected.');\n    return this.device.addEventListener('gattserverdisconnected', handleDisconnected);\n  }\n\n  isConnected() {\n    if (!this.device) return false;\n\n    if (this.device.gatt.connected) {\n      return true;\n    }\n\n    return false;\n  }\n\n}\nexport function sleep(milliseconds) {\n  const date = Date.now();\n  let currentDate = null;\n\n  do {\n    currentDate = Date.now();\n    console.log(currentDate);\n  } while (currentDate - date < milliseconds);\n}\n\nfunction callCallback(promise, callback) {\n  if (callback) {\n    promise.then(result => {\n      callback(undefined, result);\n      return result;\n    }).catch(error => {\n      callback(error);\n      return error;\n    });\n  }\n\n  return promise;\n}\n\nfunction parseData(data, t, encoding) {\n  const type = t ? t.toLowerCase() : 'unit8';\n  let result;\n  let decoder;\n\n  switch (type) {\n    case 'unit8':\n      result = data.getUint8(0);\n      break;\n\n    case 'uint16':\n      result = data.getUint16(0);\n      break;\n\n    case 'uint32':\n      result = data.getUint32(0);\n      break;\n\n    case 'int8':\n      result = data.getInt8(0);\n      break;\n\n    case 'int16':\n      result = data.getInt16(0);\n      break;\n\n    case 'int32':\n      result = data.getInt32(0);\n      break;\n\n    case 'float32':\n      result = data.getFloat32(0, true); // littleEndian\n\n      break;\n\n    case 'float32-bigEndian':\n      result = data.getFloat32(0); // BigEndian\n\n      break;\n\n    case 'float64':\n      result = data.getFloat64(0, true); // littleEndian\n\n      break;\n\n    case 'float64-bigEndian':\n      result = data.getFloat64(0); // BigEndian\n\n      break;\n\n    case 'string':\n      // TODO: have the ability to choose different string encoding: like utf16\n      decoder = new TextDecoder(encoding || 'utf8');\n      result = decoder.decode(data);\n      break;\n\n    case 'custom':\n      // let the user do the parsing\n      result = data;\n      break;\n\n    default:\n      result = data.getUint8(0);\n      break;\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/Users/zachary/capstone/madsense-app/src/btUtils.js"],"names":["p5ble","constructor","device","server","service","characteristics","handleNotifications","connect","serviceUuid","callback","console","log","callCallback","navigator","bluetooth","requestDevice","filters","services","then","name","gatt","getPrimaryService","getCharacteristics","catch","error","read","characteristic","dataTypeOrcallback","cb","dataType","uuid","validChar","find","char","readValue","value","parseData","write","inputValue","bufferToSend","encoder","TextEncoder","encode","Uint8Array","of","writeValue","startNotifications","event","target","parsedData","addEventListener","stopNotifications","removeEventListener","disconnect","connected","onDisconnected","handleDisconnected","isConnected","sleep","milliseconds","date","Date","now","currentDate","promise","result","undefined","data","t","encoding","type","toLowerCase","decoder","getUint8","getUint16","getUint32","getInt8","getInt16","getInt32","getFloat32","getFloat64","TextDecoder","decode"],"mappings":"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","sourcesContent":["\n// bluetooth code from p5ble\n\nexport class p5ble {\n  constructor() {\n    this.device = null;\n    this.server = null;\n    this.service = null;\n    this.characteristics = [];\n    this.handleNotifications = null;\n  }\n\n  connect(serviceUuid, callback) {\n\n    console.log('Requesting Bluetooth Device...');\n\n    return callCallback(navigator.bluetooth.requestDevice({filters: [{services: [serviceUuid]}]})\n      .then((device) => {\n        this.device = device;\n        console.log(`Got device ${device.name}`);\n        return device.gatt.connect();\n      })\n      .then((server) => {\n        this.server = server;\n        console.log('Getting Service...');\n        return server.getPrimaryService(serviceUuid);\n      })\n      .then((service) => {\n        this.service = service;\n        console.log('Getting Characteristics...');\n        return service.getCharacteristics();\n      })\n      .then((characteristics) => {\n        this.characteristics = characteristics;\n        console.log('Got Characteristic');\n        return characteristics;\n      })\n      .catch((error) => {\n        console.error(`Error: ${error}`);\n      }), callback);\n  }\n\n  async read(characteristic, dataTypeOrcallback, cb) {\n    let callback;\n    let dataType;\n    if (typeof dataTypeOrcallback === 'function') {\n      callback = dataTypeOrcallback;\n    } else if (typeof dataTypeOrcallback === 'string') {\n      dataType = dataTypeOrcallback;\n    }\n    if (typeof cb === 'function') {\n      callback = cb;\n    }\n\n    if (!characteristic || !characteristic.uuid) console.error('The characteristic does not exist.');\n    const validChar = this.characteristics.find(char => char.uuid === characteristic.uuid);\n    if (!validChar) return console.error('The characteristic does not exist.');\n\n    return callCallback(characteristic.readValue()\n      .then(value => parseData(value, dataType)), callback);\n  }\n\n  write(characteristic, inputValue) {\n    if (!characteristic || !characteristic.uuid) console.error('The characteristic does not exist.');\n    const validChar = this.characteristics.find(char => char.uuid === characteristic.uuid);\n    if (!validChar) return console.error('The characteristic does not exist.');\n\n    let bufferToSend;\n    if (typeof inputValue === 'string') {\n      const encoder = new TextEncoder('utf-8');\n      bufferToSend = encoder.encode(inputValue);\n    } else bufferToSend = Uint8Array.of(inputValue);\n    console.log(`Writing ${inputValue} to Characteristic...`);\n    return characteristic.writeValue(bufferToSend);\n  }\n\n  async startNotifications(characteristic, handleNotifications, dataType) {\n    if (!characteristic || !characteristic.uuid) console.error('The characteristic does not exist.');\n    const validChar = this.characteristics.find(char => char.uuid === characteristic.uuid);\n    if (!validChar) return console.error('The characteristic does not exist.');\n\n    await characteristic.startNotifications();\n\n    console.log('> Notifications started');\n\n    this.handleNotifications = (event) => {\n      const { value } = event.target;\n      const parsedData = parseData(value, dataType);\n      handleNotifications(parsedData);\n    };\n\n    return characteristic.addEventListener('characteristicvaluechanged', this.handleNotifications);\n  }\n\n  async stopNotifications(characteristic) {\n    if (!characteristic || !characteristic.uuid) console.error('The characteristic does not exist.');\n    const validChar = this.characteristics.find(char => char.uuid === characteristic.uuid);\n    if (!validChar) return console.error('The characteristic does not exist.');\n\n    try {\n      await characteristic.stopNotifications();\n\n      if (this.handleNotifications) {\n        console.log('> Notifications stopped');\n        return characteristic.removeEventListener('characteristicvaluechanged', this.handleNotifications);\n      }\n      return console.log('> Notifications stopped');\n    } catch (error) {\n      return console.error(`Error: ${error}`);\n    }\n  }\n\n  disconnect() {\n    if (!this.device) return;\n    console.log('Disconnecting from Bluetooth Device...');\n    if (this.device.gatt.connected) {\n      this.device.gatt.disconnect();\n    } else {\n      console.log('> Bluetooth Device is already disconnected');\n    }\n  }\n\n  onDisconnected(handleDisconnected) {\n    if (!this.device) return console.error('There is no device connected.');\n    return this.device.addEventListener('gattserverdisconnected', handleDisconnected);\n  }\n\n  isConnected() {\n    if (!this.device) return false;\n    if (this.device.gatt.connected) {\n      return true;\n    }\n    return false;\n  }\n}\n\nexport function sleep(milliseconds) {\n  const date = Date.now();\n  let currentDate = null;\n  do {\n    currentDate = Date.now();\n    console.log(currentDate)\n  } while (currentDate - date < milliseconds);\n}\n\nfunction callCallback(promise, callback) {\n  if (callback) {\n    promise\n      .then((result) => {\n        callback(undefined, result);\n        return result;\n      })\n      .catch((error) => {\n        callback(error);\n        return error;\n      });\n  }\n  return promise;\n}\n\nfunction parseData(data, t, encoding) {\n  const type = t ? t.toLowerCase() : 'unit8';\n  let result;\n  let decoder;\n  switch (type) {\n    case 'unit8':\n      result = data.getUint8(0);\n      break;\n\n    case 'uint16':\n      result = data.getUint16(0);\n      break;\n\n    case 'uint32':\n      result = data.getUint32(0);\n      break;\n\n    case 'int8':\n      result = data.getInt8(0);\n      break;\n\n    case 'int16':\n      result = data.getInt16(0);\n      break;\n\n    case 'int32':\n      result = data.getInt32(0);\n      break;\n\n    case 'float32':\n      result = data.getFloat32(0, true); // littleEndian\n      break;\n\n    case 'float32-bigEndian':\n      result = data.getFloat32(0); // BigEndian\n      break;\n\n    case 'float64':\n      result = data.getFloat64(0, true); // littleEndian\n      break;\n\n    case 'float64-bigEndian':\n      result = data.getFloat64(0); // BigEndian\n      break;\n\n    case 'string':\n      // TODO: have the ability to choose different string encoding: like utf16\n      decoder = new TextDecoder(encoding || 'utf8');\n      result = decoder.decode(data);\n      break;\n\n    case 'custom':\n      // let the user do the parsing\n      result = data;\n      break;\n\n    default:\n      result = data.getUint8(0);\n      break;\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}