{"ast":null,"code":"var _jsxFileName = \"/Users/zachary/capstone/madsense-app/src/MeasurementPage.js\",\n    _s = $RefreshSig$();\n\nimport { Box, Button, Modal, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction callCallback(promise, callback) {\n  if (callback) {\n    promise.then(result => {\n      callback(undefined, result);\n      return result;\n    }).catch(error => {\n      callback(error);\n      return error;\n    });\n  }\n\n  return promise;\n}\n\nfunction parseData(data, t, encoding) {\n  const type = t ? t.toLowerCase() : 'unit8';\n  let result;\n  let decoder;\n\n  switch (type) {\n    case 'unit8':\n      result = data.getUint8(0);\n      break;\n\n    case 'uint16':\n      result = data.getUint16(0);\n      break;\n\n    case 'uint32':\n      result = data.getUint32(0);\n      break;\n\n    case 'int8':\n      result = data.getInt8(0);\n      break;\n\n    case 'int16':\n      result = data.getInt16(0);\n      break;\n\n    case 'int32':\n      result = data.getInt32(0);\n      break;\n\n    case 'float32':\n      result = data.getFloat32(0, true); // littleEndian\n\n      break;\n\n    case 'float32-bigEndian':\n      result = data.getFloat32(0); // BigEndian\n\n      break;\n\n    case 'float64':\n      result = data.getFloat64(0, true); // littleEndian\n\n      break;\n\n    case 'float64-bigEndian':\n      result = data.getFloat64(0); // BigEndian\n\n      break;\n\n    case 'string':\n      // TODO: have the ability to choose different string encoding: like utf16\n      decoder = new TextDecoder(encoding || 'utf8');\n      result = decoder.decode(data);\n      break;\n\n    case 'custom':\n      // let the user do the parsing\n      result = data;\n      break;\n\n    default:\n      result = data.getUint8(0);\n      break;\n  }\n\n  return result;\n}\n\nclass p5ble {\n  constructor() {\n    this.device = null;\n    this.server = null;\n    this.service = null;\n    this.characteristics = [];\n    this.handleNotifications = null;\n  }\n\n  connect(serviceUuidOrOptions, callback) {\n    let options = {};\n    let serviceUuid;\n    console.log('Requesting Bluetooth Device...');\n    return callCallback(navigator.bluetooth.requestDevice({\n      filters: [{\n        acceptAllDevices: true\n      }]\n    }).then(device => {\n      this.device = device;\n      console.log(`Got device ${device.name}`);\n      return device.gatt.connect();\n    }).then(server => {\n      this.server = server;\n      console.log('Getting Service...');\n      return server.getPrimaryService(serviceUuid);\n    }).then(service => {\n      this.service = service;\n      console.log('Getting Characteristics...');\n      return service.getCharacteristics();\n    }).then(characteristics => {\n      this.characteristics = characteristics;\n      console.log('Got Characteristic');\n      return characteristics;\n    }).catch(error => {\n      console.error(`Error: ${error}`);\n    }), callback);\n  }\n\n  async read(characteristic, dataTypeOrcallback, cb) {\n    let callback;\n    let dataType;\n\n    if (typeof dataTypeOrcallback === 'function') {\n      callback = dataTypeOrcallback;\n    } else if (typeof dataTypeOrcallback === 'string') {\n      dataType = dataTypeOrcallback;\n    }\n\n    if (typeof cb === 'function') {\n      callback = cb;\n    }\n\n    if (!characteristic || !characteristic.uuid) console.error('The characteristic does not exist.');\n    const validChar = this.characteristics.find(char => char.uuid === characteristic.uuid);\n    if (!validChar) return console.error('The characteristic does not exist.');\n    return callCallback(characteristic.readValue().then(value => parseData(value, dataType)), callback);\n  }\n\n  write(characteristic, inputValue) {\n    if (!characteristic || !characteristic.uuid) console.error('The characteristic does not exist.');\n    const validChar = this.characteristics.find(char => char.uuid === characteristic.uuid);\n    if (!validChar) return console.error('The characteristic does not exist.');\n    let bufferToSend;\n\n    if (typeof inputValue === 'string') {\n      const encoder = new TextEncoder('utf-8');\n      bufferToSend = encoder.encode(inputValue);\n    } else bufferToSend = Uint8Array.of(inputValue);\n\n    console.log(`Writing ${inputValue} to Characteristic...`);\n    return characteristic.writeValue(bufferToSend);\n  }\n\n  async startNotifications(characteristic, handleNotifications, dataType) {\n    if (!characteristic || !characteristic.uuid) console.error('The characteristic does not exist.');\n    const validChar = this.characteristics.find(char => char.uuid === characteristic.uuid);\n    if (!validChar) return console.error('The characteristic does not exist.');\n    await characteristic.startNotifications();\n    console.log('> Notifications started');\n\n    this.handleNotifications = event => {\n      const {\n        value\n      } = event.target;\n      const parsedData = parseData(value, dataType);\n      handleNotifications(parsedData);\n    };\n\n    return characteristic.addEventListener('characteristicvaluechanged', this.handleNotifications);\n  }\n\n  async stopNotifications(characteristic) {\n    if (!characteristic || !characteristic.uuid) console.error('The characteristic does not exist.');\n    const validChar = this.characteristics.find(char => char.uuid === characteristic.uuid);\n    if (!validChar) return console.error('The characteristic does not exist.');\n\n    try {\n      await characteristic.stopNotifications();\n\n      if (this.handleNotifications) {\n        console.log('> Notifications stopped');\n        return characteristic.removeEventListener('characteristicvaluechanged', this.handleNotifications);\n      }\n\n      return console.log('> Notifications stopped');\n    } catch (error) {\n      return console.error(`Error: ${error}`);\n    }\n  }\n\n  disconnect() {\n    if (!this.device) return;\n    console.log('Disconnecting from Bluetooth Device...');\n\n    if (this.device.gatt.connected) {\n      this.device.gatt.disconnect();\n    } else {\n      console.log('> Bluetooth Device is already disconnected');\n    }\n  }\n\n  onDisconnected(handleDisconnected) {\n    if (!this.device) return console.error('There is no device connected.');\n    return this.device.addEventListener('gattserverdisconnected', handleDisconnected);\n  }\n\n  isConnected() {\n    if (!this.device) return false;\n\n    if (this.device.gatt.connected) {\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nmodule.exports = p5ble; // these are global constants right here, but might need to be moved to state variables\n\nconst receivedValues = [\"s1: 0.0\", \"s2: 0.0\", \"s3: 0.0\", \"s4: 0.0\", \"s5: 0.0\", \"s6: 0.0\", \"s7: 0.0\", \"s8: 0.0\"];\nlet isConnected = false;\nconsole.log(\"setting up...\");\nlet blueTooth = new p5ble();\nlet blueToothCharacteristic; //this is a blu\n\nfunction sleep(milliseconds) {\n  const date = Date.now();\n  let currentDate = null;\n\n  do {\n    currentDate = Date.now();\n  } while (currentDate - date < milliseconds);\n}\n\nfunction takeMeasurement() {\n  if (isConnected) {\n    sendData(\"READ\");\n    sleep(1000);\n  } else {\n    console.log(\"Error: device not paired.\");\n  }\n\n  let time = new Date().toLocaleDateString(\"en-US\");\n  console.log(receivedValues[0]);\n  console.log(receivedValues[1]);\n  console.log(receivedValues[2]);\n  console.log(receivedValues[3]);\n  console.log(receivedValues[4]);\n  console.log(receivedValues[5]);\n  console.log(receivedValues[6]);\n  console.log(receivedValues[7]);\n  return {\n    vals: Array.from({\n      length: 7\n    }, () => Math.random() * 10),\n    date: time\n  };\n}\n\nfunction connectToBle() {\n  // Connect to a device by passing the service UUID\n  let serviceUuid = 0xFFE0; // navigator.bluetooth.requestDevice({\n  //   filters: [{\n  //     services: [0xFFE0]\n  //   }]\n  // })\n  // .then(device => { /* â€¦ */ })\n  // .catch(error => { console.error(error); });\n\n  blueTooth.connect(serviceUuid, gotCharacteristics); //blueTooth.connect({ filters: [{ acceptAllDevices: true }]}, gotCharacteristics);\n} // A function that will be called once got characteristics\n\n\nfunction gotCharacteristics(error, characteristics) {\n  if (error) {\n    console.log(\"error: \", error);\n  }\n\n  console.log(\"characteristics: \", characteristics);\n  blueToothCharacteristic = characteristics[0];\n  blueTooth.startNotifications(blueToothCharacteristic, gotValue, \"string\");\n  isConnected = blueTooth.isConnected(); // Add a event handler when the device is disconnected\n\n  blueTooth.onDisconnected(onDisconnected);\n} // A function that will be called once got values\n\n\nfunction gotValue(value) {\n  console.log(\"value: \", value);\n  receivedValues[value[0]] = value;\n}\n\nfunction onDisconnected() {\n  console.log(\"Device got disconnected.\");\n  isConnected = false;\n}\n\nfunction sendData(command) {\n  const inputValue = command;\n\n  if (!(\"TextEncoder\" in window)) {\n    console.log(\"Sorry, this browser does not support TextEncoder...\");\n  }\n\n  var enc = new TextEncoder(); // always utf-8\n\n  blueToothCharacteristic.writeValue(enc.encode(inputValue));\n}\n\nexport default function MeasurementPage(props) {\n  _s();\n\n  const style = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: 600,\n    bgcolor: \"background.paper\",\n    border: \"2px solid #000\",\n    boxShadow: 24,\n    p: 4\n  };\n  let [open, setOpen] = React.useState(false);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      open: open,\n      onClose: () => setOpen(false),\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: style,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          id: \"modal-modal-title\",\n          variant: \"h6\",\n          component: \"h2\",\n          children: \"Text in a modal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          id: \"modal-modal-description\",\n          sx: {\n            mt: 2\n          },\n          children: \"Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Put on the device\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"TBD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"3rd thing here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => props.addMeasurement(takeMeasurement()),\n      children: \"Take Measurement!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => connectToBle(),\n      children: \"Pair Device\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 326,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MeasurementPage, \"xG1TONbKtDWtdOTrXaTAsNhPg/Q=\");\n\n_c = MeasurementPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeasurementPage\");","map":{"version":3,"sources":["/Users/zachary/capstone/madsense-app/src/MeasurementPage.js"],"names":["Box","Button","Modal","Typography","React","callCallback","promise","callback","then","result","undefined","catch","error","parseData","data","t","encoding","type","toLowerCase","decoder","getUint8","getUint16","getUint32","getInt8","getInt16","getInt32","getFloat32","getFloat64","TextDecoder","decode","p5ble","constructor","device","server","service","characteristics","handleNotifications","connect","serviceUuidOrOptions","options","serviceUuid","console","log","navigator","bluetooth","requestDevice","filters","acceptAllDevices","name","gatt","getPrimaryService","getCharacteristics","read","characteristic","dataTypeOrcallback","cb","dataType","uuid","validChar","find","char","readValue","value","write","inputValue","bufferToSend","encoder","TextEncoder","encode","Uint8Array","of","writeValue","startNotifications","event","target","parsedData","addEventListener","stopNotifications","removeEventListener","disconnect","connected","onDisconnected","handleDisconnected","isConnected","module","exports","receivedValues","blueTooth","blueToothCharacteristic","sleep","milliseconds","date","Date","now","currentDate","takeMeasurement","sendData","time","toLocaleDateString","vals","Array","from","length","Math","random","connectToBle","gotCharacteristics","gotValue","command","window","enc","MeasurementPage","props","style","position","top","left","transform","width","bgcolor","border","boxShadow","p","open","setOpen","useState","mt","addMeasurement"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,KAAtB,EAA6BC,UAA7B,QAA+C,eAA/C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,QAA/B,EAAyC;AACvC,MAAIA,QAAJ,EAAc;AACZD,IAAAA,OAAO,CACJE,IADH,CACSC,MAAD,IAAY;AAChBF,MAAAA,QAAQ,CAACG,SAAD,EAAYD,MAAZ,CAAR;AACA,aAAOA,MAAP;AACD,KAJH,EAKGE,KALH,CAKUC,KAAD,IAAW;AAChBL,MAAAA,QAAQ,CAACK,KAAD,CAAR;AACA,aAAOA,KAAP;AACD,KARH;AASD;;AACD,SAAON,OAAP;AACD;;AAED,SAASO,SAAT,CAAmBC,IAAnB,EAAyBC,CAAzB,EAA4BC,QAA5B,EAAsC;AACpC,QAAMC,IAAI,GAAGF,CAAC,GAAGA,CAAC,CAACG,WAAF,EAAH,GAAqB,OAAnC;AACA,MAAIT,MAAJ;AACA,MAAIU,OAAJ;;AACA,UAAQF,IAAR;AACE,SAAK,OAAL;AACER,MAAAA,MAAM,GAAGK,IAAI,CAACM,QAAL,CAAc,CAAd,CAAT;AACA;;AAEF,SAAK,QAAL;AACEX,MAAAA,MAAM,GAAGK,IAAI,CAACO,SAAL,CAAe,CAAf,CAAT;AACA;;AAEF,SAAK,QAAL;AACEZ,MAAAA,MAAM,GAAGK,IAAI,CAACQ,SAAL,CAAe,CAAf,CAAT;AACA;;AAEF,SAAK,MAAL;AACEb,MAAAA,MAAM,GAAGK,IAAI,CAACS,OAAL,CAAa,CAAb,CAAT;AACA;;AAEF,SAAK,OAAL;AACEd,MAAAA,MAAM,GAAGK,IAAI,CAACU,QAAL,CAAc,CAAd,CAAT;AACA;;AAEF,SAAK,OAAL;AACEf,MAAAA,MAAM,GAAGK,IAAI,CAACW,QAAL,CAAc,CAAd,CAAT;AACA;;AAEF,SAAK,SAAL;AACEhB,MAAAA,MAAM,GAAGK,IAAI,CAACY,UAAL,CAAgB,CAAhB,EAAmB,IAAnB,CAAT,CADF,CACqC;;AACnC;;AAEF,SAAK,mBAAL;AACEjB,MAAAA,MAAM,GAAGK,IAAI,CAACY,UAAL,CAAgB,CAAhB,CAAT,CADF,CAC+B;;AAC7B;;AAEF,SAAK,SAAL;AACEjB,MAAAA,MAAM,GAAGK,IAAI,CAACa,UAAL,CAAgB,CAAhB,EAAmB,IAAnB,CAAT,CADF,CACqC;;AACnC;;AAEF,SAAK,mBAAL;AACElB,MAAAA,MAAM,GAAGK,IAAI,CAACa,UAAL,CAAgB,CAAhB,CAAT,CADF,CAC+B;;AAC7B;;AAEF,SAAK,QAAL;AACE;AACAR,MAAAA,OAAO,GAAG,IAAIS,WAAJ,CAAgBZ,QAAQ,IAAI,MAA5B,CAAV;AACAP,MAAAA,MAAM,GAAGU,OAAO,CAACU,MAAR,CAAef,IAAf,CAAT;AACA;;AAEF,SAAK,QAAL;AACE;AACAL,MAAAA,MAAM,GAAGK,IAAT;AACA;;AAEF;AACEL,MAAAA,MAAM,GAAGK,IAAI,CAACM,QAAL,CAAc,CAAd,CAAT;AACA;AAtDJ;;AAwDA,SAAOX,MAAP;AACD;;AAID,MAAMqB,KAAN,CAAY;AACVC,EAAAA,WAAW,GAAG;AACZ,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACA,SAAKC,mBAAL,GAA2B,IAA3B;AACD;;AAEDC,EAAAA,OAAO,CAACC,oBAAD,EAAuB/B,QAAvB,EAAiC;AACtC,QAAIgC,OAAO,GAAG,EAAd;AACA,QAAIC,WAAJ;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AAEA,WAAOrC,YAAY,CAACsC,SAAS,CAACC,SAAV,CAAoBC,aAApB,CAAkC;AAAEC,MAAAA,OAAO,EAAE,CAAC;AAAEC,QAAAA,gBAAgB,EAAE;AAApB,OAAD;AAAX,KAAlC,EACjBvC,IADiB,CACXwB,MAAD,IAAY;AAChB,WAAKA,MAAL,GAAcA,MAAd;AACAS,MAAAA,OAAO,CAACC,GAAR,CAAa,cAAaV,MAAM,CAACgB,IAAK,EAAtC;AACA,aAAOhB,MAAM,CAACiB,IAAP,CAAYZ,OAAZ,EAAP;AACD,KALiB,EAMjB7B,IANiB,CAMXyB,MAAD,IAAY;AAChB,WAAKA,MAAL,GAAcA,MAAd;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,aAAOT,MAAM,CAACiB,iBAAP,CAAyBV,WAAzB,CAAP;AACD,KAViB,EAWjBhC,IAXiB,CAWX0B,OAAD,IAAa;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA,aAAOR,OAAO,CAACiB,kBAAR,EAAP;AACD,KAfiB,EAgBjB3C,IAhBiB,CAgBX2B,eAAD,IAAqB;AACzB,WAAKA,eAAL,GAAuBA,eAAvB;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,aAAOP,eAAP;AACD,KApBiB,EAqBjBxB,KArBiB,CAqBVC,KAAD,IAAW;AAChB6B,MAAAA,OAAO,CAAC7B,KAAR,CAAe,UAASA,KAAM,EAA9B;AACD,KAvBiB,CAAD,EAuBbL,QAvBa,CAAnB;AAwBD;;AAES,QAAJ6C,IAAI,CAACC,cAAD,EAAiBC,kBAAjB,EAAqCC,EAArC,EAAyC;AACjD,QAAIhD,QAAJ;AACA,QAAIiD,QAAJ;;AACA,QAAI,OAAOF,kBAAP,KAA8B,UAAlC,EAA8C;AAC5C/C,MAAAA,QAAQ,GAAG+C,kBAAX;AACD,KAFD,MAEO,IAAI,OAAOA,kBAAP,KAA8B,QAAlC,EAA4C;AACjDE,MAAAA,QAAQ,GAAGF,kBAAX;AACD;;AACD,QAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;AAC5BhD,MAAAA,QAAQ,GAAGgD,EAAX;AACD;;AAED,QAAI,CAACF,cAAD,IAAmB,CAACA,cAAc,CAACI,IAAvC,EAA6ChB,OAAO,CAAC7B,KAAR,CAAc,oCAAd;AAC7C,UAAM8C,SAAS,GAAG,KAAKvB,eAAL,CAAqBwB,IAArB,CAA0BC,IAAI,IAAIA,IAAI,CAACH,IAAL,KAAcJ,cAAc,CAACI,IAA/D,CAAlB;AACA,QAAI,CAACC,SAAL,EAAgB,OAAOjB,OAAO,CAAC7B,KAAR,CAAc,oCAAd,CAAP;AAEhB,WAAOP,YAAY,CAACgD,cAAc,CAACQ,SAAf,GACjBrD,IADiB,CACZsD,KAAK,IAAIjD,SAAS,CAACiD,KAAD,EAAQN,QAAR,CADN,CAAD,EAC2BjD,QAD3B,CAAnB;AAED;;AAEDwD,EAAAA,KAAK,CAACV,cAAD,EAAiBW,UAAjB,EAA6B;AAChC,QAAI,CAACX,cAAD,IAAmB,CAACA,cAAc,CAACI,IAAvC,EAA6ChB,OAAO,CAAC7B,KAAR,CAAc,oCAAd;AAC7C,UAAM8C,SAAS,GAAG,KAAKvB,eAAL,CAAqBwB,IAArB,CAA0BC,IAAI,IAAIA,IAAI,CAACH,IAAL,KAAcJ,cAAc,CAACI,IAA/D,CAAlB;AACA,QAAI,CAACC,SAAL,EAAgB,OAAOjB,OAAO,CAAC7B,KAAR,CAAc,oCAAd,CAAP;AAEhB,QAAIqD,YAAJ;;AACA,QAAI,OAAOD,UAAP,KAAsB,QAA1B,EAAoC;AAClC,YAAME,OAAO,GAAG,IAAIC,WAAJ,CAAgB,OAAhB,CAAhB;AACAF,MAAAA,YAAY,GAAGC,OAAO,CAACE,MAAR,CAAeJ,UAAf,CAAf;AACD,KAHD,MAGOC,YAAY,GAAGI,UAAU,CAACC,EAAX,CAAcN,UAAd,CAAf;;AACPvB,IAAAA,OAAO,CAACC,GAAR,CAAa,WAAUsB,UAAW,uBAAlC;AACA,WAAOX,cAAc,CAACkB,UAAf,CAA0BN,YAA1B,CAAP;AACD;;AAEuB,QAAlBO,kBAAkB,CAACnB,cAAD,EAAiBjB,mBAAjB,EAAsCoB,QAAtC,EAAgD;AACtE,QAAI,CAACH,cAAD,IAAmB,CAACA,cAAc,CAACI,IAAvC,EAA6ChB,OAAO,CAAC7B,KAAR,CAAc,oCAAd;AAC7C,UAAM8C,SAAS,GAAG,KAAKvB,eAAL,CAAqBwB,IAArB,CAA0BC,IAAI,IAAIA,IAAI,CAACH,IAAL,KAAcJ,cAAc,CAACI,IAA/D,CAAlB;AACA,QAAI,CAACC,SAAL,EAAgB,OAAOjB,OAAO,CAAC7B,KAAR,CAAc,oCAAd,CAAP;AAEhB,UAAMyC,cAAc,CAACmB,kBAAf,EAAN;AAEA/B,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;;AAEA,SAAKN,mBAAL,GAA4BqC,KAAD,IAAW;AACpC,YAAM;AAAEX,QAAAA;AAAF,UAAYW,KAAK,CAACC,MAAxB;AACA,YAAMC,UAAU,GAAG9D,SAAS,CAACiD,KAAD,EAAQN,QAAR,CAA5B;AACApB,MAAAA,mBAAmB,CAACuC,UAAD,CAAnB;AACD,KAJD;;AAMA,WAAOtB,cAAc,CAACuB,gBAAf,CAAgC,4BAAhC,EAA8D,KAAKxC,mBAAnE,CAAP;AACD;;AAEsB,QAAjByC,iBAAiB,CAACxB,cAAD,EAAiB;AACtC,QAAI,CAACA,cAAD,IAAmB,CAACA,cAAc,CAACI,IAAvC,EAA6ChB,OAAO,CAAC7B,KAAR,CAAc,oCAAd;AAC7C,UAAM8C,SAAS,GAAG,KAAKvB,eAAL,CAAqBwB,IAArB,CAA0BC,IAAI,IAAIA,IAAI,CAACH,IAAL,KAAcJ,cAAc,CAACI,IAA/D,CAAlB;AACA,QAAI,CAACC,SAAL,EAAgB,OAAOjB,OAAO,CAAC7B,KAAR,CAAc,oCAAd,CAAP;;AAEhB,QAAI;AACF,YAAMyC,cAAc,CAACwB,iBAAf,EAAN;;AAEA,UAAI,KAAKzC,mBAAT,EAA8B;AAC5BK,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACA,eAAOW,cAAc,CAACyB,mBAAf,CAAmC,4BAAnC,EAAiE,KAAK1C,mBAAtE,CAAP;AACD;;AACD,aAAOK,OAAO,CAACC,GAAR,CAAY,yBAAZ,CAAP;AACD,KARD,CAQE,OAAO9B,KAAP,EAAc;AACd,aAAO6B,OAAO,CAAC7B,KAAR,CAAe,UAASA,KAAM,EAA9B,CAAP;AACD;AACF;;AAEDmE,EAAAA,UAAU,GAAG;AACX,QAAI,CAAC,KAAK/C,MAAV,EAAkB;AAClBS,IAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;;AACA,QAAI,KAAKV,MAAL,CAAYiB,IAAZ,CAAiB+B,SAArB,EAAgC;AAC9B,WAAKhD,MAAL,CAAYiB,IAAZ,CAAiB8B,UAAjB;AACD,KAFD,MAEO;AACLtC,MAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ;AACD;AACF;;AAEDuC,EAAAA,cAAc,CAACC,kBAAD,EAAqB;AACjC,QAAI,CAAC,KAAKlD,MAAV,EAAkB,OAAOS,OAAO,CAAC7B,KAAR,CAAc,+BAAd,CAAP;AAClB,WAAO,KAAKoB,MAAL,CAAY4C,gBAAZ,CAA6B,wBAA7B,EAAuDM,kBAAvD,CAAP;AACD;;AAEDC,EAAAA,WAAW,GAAG;AACZ,QAAI,CAAC,KAAKnD,MAAV,EAAkB,OAAO,KAAP;;AAClB,QAAI,KAAKA,MAAL,CAAYiB,IAAZ,CAAiB+B,SAArB,EAAgC;AAC9B,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD;;AApIS;;AAuIZI,MAAM,CAACC,OAAP,GAAiBvD,KAAjB,C,CAKA;;AACA,MAAMwD,cAAc,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,EAAwD,SAAxD,EAAmE,SAAnE,EAA8E,SAA9E,CAAvB;AACA,IAAIH,WAAW,GAAG,KAAlB;AACA1C,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,IAAI6C,SAAS,GAAG,IAAIzD,KAAJ,EAAhB;AACA,IAAI0D,uBAAJ,C,CAA6B;;AAE7B,SAASC,KAAT,CAAeC,YAAf,EAA6B;AAC3B,QAAMC,IAAI,GAAGC,IAAI,CAACC,GAAL,EAAb;AACA,MAAIC,WAAW,GAAG,IAAlB;;AACA,KAAG;AACDA,IAAAA,WAAW,GAAGF,IAAI,CAACC,GAAL,EAAd;AACD,GAFD,QAESC,WAAW,GAAGH,IAAd,GAAqBD,YAF9B;AAGD;;AAED,SAASK,eAAT,GAA2B;AACzB,MAAIZ,WAAJ,EAAiB;AACfa,IAAAA,QAAQ,CAAC,MAAD,CAAR;AACAP,IAAAA,KAAK,CAAC,IAAD,CAAL;AACD,GAHD,MAGO;AACLhD,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACD;;AAED,MAAIuD,IAAI,GAAG,IAAIL,IAAJ,GAAWM,kBAAX,CAA8B,OAA9B,CAAX;AACAzD,EAAAA,OAAO,CAACC,GAAR,CAAY4C,cAAc,CAAC,CAAD,CAA1B;AACA7C,EAAAA,OAAO,CAACC,GAAR,CAAY4C,cAAc,CAAC,CAAD,CAA1B;AACA7C,EAAAA,OAAO,CAACC,GAAR,CAAY4C,cAAc,CAAC,CAAD,CAA1B;AACA7C,EAAAA,OAAO,CAACC,GAAR,CAAY4C,cAAc,CAAC,CAAD,CAA1B;AACA7C,EAAAA,OAAO,CAACC,GAAR,CAAY4C,cAAc,CAAC,CAAD,CAA1B;AACA7C,EAAAA,OAAO,CAACC,GAAR,CAAY4C,cAAc,CAAC,CAAD,CAA1B;AACA7C,EAAAA,OAAO,CAACC,GAAR,CAAY4C,cAAc,CAAC,CAAD,CAA1B;AACA7C,EAAAA,OAAO,CAACC,GAAR,CAAY4C,cAAc,CAAC,CAAD,CAA1B;AAEA,SAAO;AACLa,IAAAA,IAAI,EAAEC,KAAK,CAACC,IAAN,CAAW;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAX,EAA0B,MAAMC,IAAI,CAACC,MAAL,KAAgB,EAAhD,CADD;AAELb,IAAAA,IAAI,EAAEM;AAFD,GAAP;AAID;;AAED,SAASQ,YAAT,GAAwB;AACtB;AACA,MAAIjE,WAAW,GAAG,MAAlB,CAFsB,CAGtB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA+C,EAAAA,SAAS,CAAClD,OAAV,CAAkBG,WAAlB,EAA+BkE,kBAA/B,EAVsB,CAWtB;AACD,C,CAED;;;AACA,SAASA,kBAAT,CAA4B9F,KAA5B,EAAmCuB,eAAnC,EAAoD;AAClD,MAAIvB,KAAJ,EAAW;AACT6B,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB9B,KAAvB;AACD;;AACD6B,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCP,eAAjC;AACAqD,EAAAA,uBAAuB,GAAGrD,eAAe,CAAC,CAAD,CAAzC;AAEAoD,EAAAA,SAAS,CAACf,kBAAV,CAA6BgB,uBAA7B,EAAsDmB,QAAtD,EAAgE,QAAhE;AAEAxB,EAAAA,WAAW,GAAGI,SAAS,CAACJ,WAAV,EAAd,CATkD,CAUlD;;AACAI,EAAAA,SAAS,CAACN,cAAV,CAAyBA,cAAzB;AACD,C,CAED;;;AACA,SAAS0B,QAAT,CAAkB7C,KAAlB,EAAyB;AACvBrB,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBoB,KAAvB;AACAwB,EAAAA,cAAc,CAACxB,KAAK,CAAC,CAAD,CAAN,CAAd,GAA2BA,KAA3B;AACD;;AAED,SAASmB,cAAT,GAA0B;AACxBxC,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAyC,EAAAA,WAAW,GAAG,KAAd;AACD;;AAED,SAASa,QAAT,CAAkBY,OAAlB,EAA2B;AACzB,QAAM5C,UAAU,GAAG4C,OAAnB;;AACA,MAAI,EAAE,iBAAiBC,MAAnB,CAAJ,EAAgC;AAC9BpE,IAAAA,OAAO,CAACC,GAAR,CAAY,qDAAZ;AACD;;AACD,MAAIoE,GAAG,GAAG,IAAI3C,WAAJ,EAAV,CALyB,CAKI;;AAC7BqB,EAAAA,uBAAuB,CAACjB,UAAxB,CAAmCuC,GAAG,CAAC1C,MAAJ,CAAWJ,UAAX,CAAnC;AACD;;AAED,eAAe,SAAS+C,eAAT,CAAyBC,KAAzB,EAAgC;AAAA;;AAC7C,QAAMC,KAAK,GAAG;AACZC,IAAAA,QAAQ,EAAE,UADE;AAEZC,IAAAA,GAAG,EAAE,KAFO;AAGZC,IAAAA,IAAI,EAAE,KAHM;AAIZC,IAAAA,SAAS,EAAE,uBAJC;AAKZC,IAAAA,KAAK,EAAE,GALK;AAMZC,IAAAA,OAAO,EAAE,kBANG;AAOZC,IAAAA,MAAM,EAAE,gBAPI;AAQZC,IAAAA,SAAS,EAAE,EARC;AASZC,IAAAA,CAAC,EAAE;AATS,GAAd;AAWA,MAAI,CAACC,IAAD,EAAOC,OAAP,IAAkBxH,KAAK,CAACyH,QAAN,CAAe,KAAf,CAAtB;AACA,sBACE,QAAC,GAAD;AAAA,4BACE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAEF,IAAb;AAAmB,MAAA,OAAO,EAAE,MAAMC,OAAO,CAAC,KAAD,CAAzC;AAAA,6BACE,QAAC,GAAD;AAAK,QAAA,EAAE,EAAEX,KAAT;AAAA,gCACE,QAAC,UAAD;AAAY,UAAA,EAAE,EAAC,mBAAf;AAAmC,UAAA,OAAO,EAAC,IAA3C;AAAgD,UAAA,SAAS,EAAC,IAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,UAAD;AAAY,UAAA,EAAE,EAAC,yBAAf;AAAyC,UAAA,EAAE,EAAE;AAAEa,YAAAA,EAAE,EAAE;AAAN,WAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAWE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF,eAgBE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,MAAMd,KAAK,CAACe,cAAN,CAAqBhC,eAAe,EAApC,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBF,eAmBE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,MAAMU,YAAY,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAnBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD;;GApCuBM,e;;KAAAA,e","sourcesContent":["import { Box, Button, Modal, Typography } from \"@mui/material\";\nimport React from \"react\";\n\nfunction callCallback(promise, callback) {\n  if (callback) {\n    promise\n      .then((result) => {\n        callback(undefined, result);\n        return result;\n      })\n      .catch((error) => {\n        callback(error);\n        return error;\n      });\n  }\n  return promise;\n}\n\nfunction parseData(data, t, encoding) {\n  const type = t ? t.toLowerCase() : 'unit8';\n  let result;\n  let decoder;\n  switch (type) {\n    case 'unit8':\n      result = data.getUint8(0);\n      break;\n\n    case 'uint16':\n      result = data.getUint16(0);\n      break;\n\n    case 'uint32':\n      result = data.getUint32(0);\n      break;\n\n    case 'int8':\n      result = data.getInt8(0);\n      break;\n\n    case 'int16':\n      result = data.getInt16(0);\n      break;\n\n    case 'int32':\n      result = data.getInt32(0);\n      break;\n\n    case 'float32':\n      result = data.getFloat32(0, true); // littleEndian\n      break;\n\n    case 'float32-bigEndian':\n      result = data.getFloat32(0); // BigEndian\n      break;\n\n    case 'float64':\n      result = data.getFloat64(0, true); // littleEndian\n      break;\n\n    case 'float64-bigEndian':\n      result = data.getFloat64(0); // BigEndian\n      break;\n\n    case 'string':\n      // TODO: have the ability to choose different string encoding: like utf16\n      decoder = new TextDecoder(encoding || 'utf8');\n      result = decoder.decode(data);\n      break;\n\n    case 'custom':\n      // let the user do the parsing\n      result = data;\n      break;\n\n    default:\n      result = data.getUint8(0);\n      break;\n  }\n  return result;\n}\n\n\n\nclass p5ble {\n  constructor() {\n    this.device = null;\n    this.server = null;\n    this.service = null;\n    this.characteristics = [];\n    this.handleNotifications = null;\n  }\n\n  connect(serviceUuidOrOptions, callback) {\n    let options = {};\n    let serviceUuid;\n\n    console.log('Requesting Bluetooth Device...');\n\n    return callCallback(navigator.bluetooth.requestDevice({ filters: [{ acceptAllDevices: true }]})\n      .then((device) => {\n        this.device = device;\n        console.log(`Got device ${device.name}`);\n        return device.gatt.connect();\n      })\n      .then((server) => {\n        this.server = server;\n        console.log('Getting Service...');\n        return server.getPrimaryService(serviceUuid);\n      })\n      .then((service) => {\n        this.service = service;\n        console.log('Getting Characteristics...');\n        return service.getCharacteristics();\n      })\n      .then((characteristics) => {\n        this.characteristics = characteristics;\n        console.log('Got Characteristic');\n        return characteristics;\n      })\n      .catch((error) => {\n        console.error(`Error: ${error}`);\n      }), callback);\n  }\n\n  async read(characteristic, dataTypeOrcallback, cb) {\n    let callback;\n    let dataType;\n    if (typeof dataTypeOrcallback === 'function') {\n      callback = dataTypeOrcallback;\n    } else if (typeof dataTypeOrcallback === 'string') {\n      dataType = dataTypeOrcallback;\n    }\n    if (typeof cb === 'function') {\n      callback = cb;\n    }\n\n    if (!characteristic || !characteristic.uuid) console.error('The characteristic does not exist.');\n    const validChar = this.characteristics.find(char => char.uuid === characteristic.uuid);\n    if (!validChar) return console.error('The characteristic does not exist.');\n\n    return callCallback(characteristic.readValue()\n      .then(value => parseData(value, dataType)), callback);\n  }\n\n  write(characteristic, inputValue) {\n    if (!characteristic || !characteristic.uuid) console.error('The characteristic does not exist.');\n    const validChar = this.characteristics.find(char => char.uuid === characteristic.uuid);\n    if (!validChar) return console.error('The characteristic does not exist.');\n\n    let bufferToSend;\n    if (typeof inputValue === 'string') {\n      const encoder = new TextEncoder('utf-8');\n      bufferToSend = encoder.encode(inputValue);\n    } else bufferToSend = Uint8Array.of(inputValue);\n    console.log(`Writing ${inputValue} to Characteristic...`);\n    return characteristic.writeValue(bufferToSend);\n  }\n\n  async startNotifications(characteristic, handleNotifications, dataType) {\n    if (!characteristic || !characteristic.uuid) console.error('The characteristic does not exist.');\n    const validChar = this.characteristics.find(char => char.uuid === characteristic.uuid);\n    if (!validChar) return console.error('The characteristic does not exist.');\n\n    await characteristic.startNotifications();\n\n    console.log('> Notifications started');\n\n    this.handleNotifications = (event) => {\n      const { value } = event.target;\n      const parsedData = parseData(value, dataType);\n      handleNotifications(parsedData);\n    };\n\n    return characteristic.addEventListener('characteristicvaluechanged', this.handleNotifications);\n  }\n\n  async stopNotifications(characteristic) {\n    if (!characteristic || !characteristic.uuid) console.error('The characteristic does not exist.');\n    const validChar = this.characteristics.find(char => char.uuid === characteristic.uuid);\n    if (!validChar) return console.error('The characteristic does not exist.');\n\n    try {\n      await characteristic.stopNotifications();\n\n      if (this.handleNotifications) {\n        console.log('> Notifications stopped');\n        return characteristic.removeEventListener('characteristicvaluechanged', this.handleNotifications);\n      }\n      return console.log('> Notifications stopped');\n    } catch (error) {\n      return console.error(`Error: ${error}`);\n    }\n  }\n\n  disconnect() {\n    if (!this.device) return;\n    console.log('Disconnecting from Bluetooth Device...');\n    if (this.device.gatt.connected) {\n      this.device.gatt.disconnect();\n    } else {\n      console.log('> Bluetooth Device is already disconnected');\n    }\n  }\n\n  onDisconnected(handleDisconnected) {\n    if (!this.device) return console.error('There is no device connected.');\n    return this.device.addEventListener('gattserverdisconnected', handleDisconnected);\n  }\n\n  isConnected() {\n    if (!this.device) return false;\n    if (this.device.gatt.connected) {\n      return true;\n    }\n    return false;\n  }\n}\n\nmodule.exports = p5ble;\n\n\n\n\n// these are global constants right here, but might need to be moved to state variables\nconst receivedValues = [\"s1: 0.0\", \"s2: 0.0\", \"s3: 0.0\", \"s4: 0.0\", \"s5: 0.0\", \"s6: 0.0\", \"s7: 0.0\", \"s8: 0.0\"];\nlet isConnected = false;\nconsole.log(\"setting up...\")\nlet blueTooth = new p5ble();\nlet blueToothCharacteristic; //this is a blu\n\nfunction sleep(milliseconds) {\n  const date = Date.now();\n  let currentDate = null;\n  do {\n    currentDate = Date.now();\n  } while (currentDate - date < milliseconds);\n}\n\nfunction takeMeasurement() {\n  if (isConnected) {\n    sendData(\"READ\");\n    sleep(1000);\n  } else {\n    console.log(\"Error: device not paired.\")\n  }\n  \n  let time = new Date().toLocaleDateString(\"en-US\");\n  console.log(receivedValues[0])\n  console.log(receivedValues[1])\n  console.log(receivedValues[2])\n  console.log(receivedValues[3])\n  console.log(receivedValues[4])\n  console.log(receivedValues[5])\n  console.log(receivedValues[6])\n  console.log(receivedValues[7])\n\n  return {\n    vals: Array.from({ length: 7 }, () => Math.random() * 10),\n    date: time,\n  };\n}\n\nfunction connectToBle() {\n  // Connect to a device by passing the service UUID\n  let serviceUuid = 0xFFE0\n  // navigator.bluetooth.requestDevice({\n  //   filters: [{\n  //     services: [0xFFE0]\n  //   }]\n  // })\n  // .then(device => { /* â€¦ */ })\n  // .catch(error => { console.error(error); });\n  blueTooth.connect(serviceUuid, gotCharacteristics);\n  //blueTooth.connect({ filters: [{ acceptAllDevices: true }]}, gotCharacteristics);\n}\n\n// A function that will be called once got characteristics\nfunction gotCharacteristics(error, characteristics) {\n  if (error) {\n    console.log(\"error: \", error);\n  }\n  console.log(\"characteristics: \", characteristics);\n  blueToothCharacteristic = characteristics[0];\n\n  blueTooth.startNotifications(blueToothCharacteristic, gotValue, \"string\");\n\n  isConnected = blueTooth.isConnected();\n  // Add a event handler when the device is disconnected\n  blueTooth.onDisconnected(onDisconnected);\n}\n\n// A function that will be called once got values\nfunction gotValue(value) {\n  console.log(\"value: \", value);\n  receivedValues[value[0]] = value;\n}\n\nfunction onDisconnected() {\n  console.log(\"Device got disconnected.\");\n  isConnected = false;\n}\n\nfunction sendData(command) {\n  const inputValue = command;\n  if (!(\"TextEncoder\" in window)) {\n    console.log(\"Sorry, this browser does not support TextEncoder...\");\n  }\n  var enc = new TextEncoder(); // always utf-8\n  blueToothCharacteristic.writeValue(enc.encode(inputValue));\n}\n\nexport default function MeasurementPage(props) {\n  const style = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: 600,\n    bgcolor: \"background.paper\",\n    border: \"2px solid #000\",\n    boxShadow: 24,\n    p: 4,\n  };\n  let [open, setOpen] = React.useState(false);\n  return (\n    <Box>\n      <Modal open={open} onClose={() => setOpen(false)}>\n        <Box sx={style}>\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n            Text in a modal\n          </Typography>\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\n            Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\n          </Typography>\n        </Box>\n      </Modal>\n      <ol>\n        <li>Put on the device</li>\n        <li>TBD</li>\n        <li>3rd thing here</li>\n      </ol>\n      <Button onClick={() => props.addMeasurement(takeMeasurement())}>\n        Take Measurement!\n      </Button>\n      <Button onClick={() => connectToBle()}>Pair Device</Button>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}