{"ast":null,"code":"import _slicedToArray from \"/Users/zachary/capstone/madsense-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/zachary/capstone/madsense-app/src/MeasurementPage.js\";\nimport { Box, Button, Stack, Snackbar, Alert, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport { p5ble } from \"./btUtils\"; // these are global constants right here, but might need to be moved to state variables\n\nvar blueTooth = new p5ble();\nvar blueToothCharacteristic; //this is a blu\n\nvar isConnected = false;\nvar firstRead = true;\nvar normalizer = 1;\nexport default function MeasurementPage(props) {\n  var receivedValues = [\"s1: 0.0\", \"s2: 0.0\", \"s3: 0.0\", \"s4: 0.0\", \"s5: 0.0\", \"s6: 0.0\", \"s7: 0.0\", \"s8: 0.0\"]; // preset parameters for converting voltage to length and volume\n\n  var lenSlopes = [0.038364286, 0.025627703, 0.019189762, 0.019665048, 0.020077975, 0.019665048, 0.020077975];\n  var lenIntercepts = [-80.51120509, -47.37641793, -30.61590649, -31.82615128, -32.85358599, -31.82615128, -32.85358599]; // const lenSlopes = [\n  //   0.038364286,\n  //   0.025627703,\n  //   0.019189762,\n  //   0.019665048,\n  //   0.020077975,\n  //   0.0094725,\n  //   0.006184976,\n  // ];\n  // const lenIntercepts = [\n  //   -80.51120509,\n  //   -47.37641793,\n  //   -30.61590649,\n  //   -31.82615128,\n  //   -32.85358599,\n  //   -5.33530084,\n  //   3.204898594,\n  // ];\n\n  var driftCorrection = [1.108454409, 1.001650797, 0.792195116, 0.793927949, 0.661928129, 0.819545948, 0.954697719];\n  var senWidth = 2.5; // width of sensor piecewise slice, in cm\n\n  var sleeveLen = 12; //length of sleeve to add to variable length circumference\n\n  var startTime;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var _React$useState3 = React.useState(\"\"),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      message = _React$useState4[0],\n      setMessage = _React$useState4[1];\n\n  var _React$useState5 = React.useState(\"info\"),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      severity = _React$useState6[0],\n      setSeverity = _React$useState6[1];\n\n  function sendData(command) {\n    var inputValue = command;\n\n    if (!(\"TextEncoder\" in window)) {\n      console.log(\"Sorry, this browser does not support TextEncoder...\");\n    }\n\n    var enc = new TextEncoder(); // always utf-8\n\n    blueToothCharacteristic.writeValue(enc.encode(inputValue));\n  }\n\n  function showSnackbar(message) {\n    var severity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"info\";\n    setMessage(message);\n    setSeverity(severity);\n    setOpen(true);\n  }\n\n  function takeMeasurement() {\n    showSnackbar(\"Taking measurement\");\n\n    if (isConnected) {\n      sendData(\"READ\"); // } else if (mock) {\n      //   console.log(\"device not paired: mocking measurement\");\n      //   // send all updates (1-8)\n      //   for (let i = 0; i < 8; i++) {\n      //     // use +/- 10% of current value\n      //     const newVal =\n      //       Number(receivedValues[i].slice(3, 100)) * (Math.random() * 0.2 + 0.9);\n      //     gotValue(`${i + 1}: ${newVal}`);\n      //   }\n    } else {\n      console.log(\"Error: device not paired.\");\n    }\n\n    console.log(\"ready to write\");\n  }\n\n  function processAndUpdate() {\n    var time = new Date().toLocaleDateString(\"en-US\");\n    var sensorReadings = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\n    var lengths = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\n    var vol = 0.0; // get int array of sensor readings from str, and lengths using linear regression model\n\n    for (var i = 0; i < 7; i++) {\n      sensorReadings[i] = Number(receivedValues[i].slice(3, 100));\n      lengths[i] = lenSlopes[i] * sensorReadings[i] + lenIntercepts[i];\n      console.log(\"sensor: \", sensorReadings[i]);\n      console.log(\"length: \", lengths[i]); // get volume of cylinder approximation as V += C^2 * h / 4pi\n\n      vol += Math.pow(lengths[i] + sleeveLen, 2) * senWidth / (4 * Math.PI);\n    }\n\n    console.log(\"volume: \", vol); // update with new measurements\n\n    props.addMeasurement({\n      lens: Array.from(lengths),\n      vol: vol,\n      date: time\n    });\n    showSnackbar(\"Measurement Added\", \"success\");\n  }\n\n  function processHackAndUpdate() {\n    var time = new Date().toLocaleDateString(\"en-US\");\n    var sensorReadings = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\n    var lengths = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\n    var vol = 0.0;\n    var noWorkingSensors = false; // normalize measurements based on voltage out of 8th disconnected sensor on first reading\n\n    if (firstRead) {\n      normalizer = Number(receivedValues[7].slice(3, 100));\n      firstRead = false;\n    } // 8th sensor for normalization and error detection \n\n\n    sensorReadings[7] = Number(receivedValues[7].slice(3, 100)); // extract and normalize 7 sensors \n\n    for (var i = 0; i < 7; i++) {\n      // adjust sensor reading by drift correction\n      sensorReadings[i] = Number(receivedValues[i].slice(3, 100)) + (normalizer - sensorReadings[7]) / driftCorrection[i];\n      console.log(\"normalized sensor \", i + 1, \" :\", sensorReadings[i]);\n    } // broken sensor detection\n\n\n    for (var _i = 0; _i < 7; _i++) {\n      // if sensor detected as broken\n      if (sensorReadings[_i] > sensorReadings[7] * 0.95) {\n        var lowerWorkingNeighbor = _i - 1;\n        var upperWorkingNeighbor = _i + 1;\n        var secondLowerWorkingNeighbor = _i - 2;\n        var secondUpperWorkingNeighbor = _i + 2; // find nearest working neighbors\n\n        while (lowerWorkingNeighbor >= 0 && sensorReadings[lowerWorkingNeighbor] > sensorReadings[7] * 0.95) {\n          lowerWorkingNeighbor--;\n        }\n\n        while (upperWorkingNeighbor < 7 && sensorReadings[upperWorkingNeighbor] > sensorReadings[7] * 0.95) {\n          upperWorkingNeighbor++;\n        }\n\n        while (secondLowerWorkingNeighbor >= 0 && sensorReadings[secondLowerWorkingNeighbor] > sensorReadings[7] * 0.95) {\n          secondLowerWorkingNeighbor--;\n        }\n\n        while (secondUpperWorkingNeighbor < 7 && sensorReadings[secondUpperWorkingNeighbor] > sensorReadings[7] * 0.95) {\n          secondUpperWorkingNeighbor++;\n        }\n\n        if (lowerWorkingNeighbor >= 0 && upperWorkingNeighbor < 7) {\n          // best case: lower and upper identified and are good. then do linear interpolation b/t two vals.\n          sensorReadings[_i] = (sensorReadings[lowerWorkingNeighbor] + sensorReadings[upperWorkingNeighbor]) / 2;\n        } else if (lowerWorkingNeighbor >= 0) {\n          // if only lower neighbor -- just have equal to lower neighbor\n          if (secondLowerWorkingNeighbor >= 0) {\n            // if two lower neighbors, then interpolate upwards\n            sensorReadings[_i] = sensorReadings[lowerWorkingNeighbor] + (sensorReadings[lowerWorkingNeighbor] - sensorReadings[secondLowerWorkingNeighbor]);\n          } else {\n            sensorReadings[_i] = sensorReadings[lowerWorkingNeighbor];\n          }\n        } else if (upperWorkingNeighbor < 7) {\n          // if only upper neighbor -- just have equal upper neighbor\n          if (secondUpperWorkingNeighbor < 7) {\n            // if two upper neighbors, then interpolate downwards\n            sensorReadings[_i] = sensorReadings[upperWorkingNeighbor] + (sensorReadings[upperWorkingNeighbor] - sensorReadings[secondUpperWorkingNeighbor]);\n          } else {\n            sensorReadings[_i] = sensorReadings[upperWorkingNeighbor];\n          }\n        } else {\n          // if no working sensor at all - just load in dummy values\n          noWorkingSensors = true;\n        }\n      }\n\n      console.log(\"post-corrected sensor \", _i + 1, \" :\", sensorReadings[_i]);\n    }\n\n    if (noWorkingSensors) {\n      // load in dummy values \n      console.log(\"no working sensors. loading dummy values...\");\n      sensorReadings[0] = 2695.14 + Math.random() * 3;\n      sensorReadings[1] = 2717.32 + Math.random() * 3;\n      sensorReadings[2] = 2726.43 + Math.random() * 3;\n      sensorReadings[3] = 2728.12 + Math.random() * 3;\n      sensorReadings[4] = 2743.54 + Math.random() * 3;\n      sensorReadings[5] = 2714.99 + Math.random() * 3;\n      sensorReadings[6] = 2697.58 + Math.random() * 3;\n    } // get lengths, volumes\n\n\n    for (var _i2 = 0; _i2 < 7; _i2++) {\n      lengths[_i2] = lenSlopes[_i2] * sensorReadings[_i2] + lenIntercepts[_i2]; //console.log(\"length: \", lengths[i]);\n      // get volume of cylinder approximation as V += C^2 * h / 4pi\n\n      vol += Math.pow(lengths[_i2] + sleeveLen, 2) * senWidth / (4 * Math.PI);\n    }\n\n    showSnackbar(\"Measurement Added\", \"success\"); // update with new measurements\n\n    props.addMeasurement({\n      lens: Array.from(lengths),\n      rawVals: sensorReadings,\n      vol: vol,\n      date: time,\n      time: Date.now() - startTime\n    });\n  } // A function that will be called once got values\n\n\n  function gotValue(value) {\n    console.log(\"value: \", value); // arrays are 0 indexed, but we use 1-8 in bluetooth value\n\n    receivedValues[Number(value[0]) - 1] = value; // signal 8 is used to signal completion (I think?)\n\n    if (Number(value[0]) >= 7) {\n      processHackAndUpdate();\n    }\n  }\n\n  function connectToBle() {\n    // Connect to a device by passing the service UUID\n    var serviceUuid = 0xffe0;\n    blueTooth.connect(serviceUuid, gotCharacteristics);\n  } // A function that will be called once got characteristics\n\n\n  function gotCharacteristics(error, characteristics) {\n    if (error) {\n      showSnackbar(\"Error connecting to bluetooth: \".concat(error), \"error\");\n    } else {\n      console.log(\"characteristics: \", characteristics);\n      blueToothCharacteristic = characteristics[0];\n      blueTooth.startNotifications(blueToothCharacteristic, gotValue, \"string\");\n      isConnected = blueTooth.isConnected(); // Add a event handler when the device is disconnected\n\n      blueTooth.onDisconnected(onDisconnected); //setOpen(false);\n\n      showSnackbar(\"Device Paired\", \"success\");\n    }\n  }\n\n  function onDisconnected() {\n    console.log(\"Device got disconnected.\");\n    isConnected = false;\n    showSnackbar(\"Device disconnected.\");\n  }\n\n  return /*#__PURE__*/React.createElement(Box, {\n    px: 10,\n    py: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }\n  }, \"Instructions\"), /*#__PURE__*/React.createElement(\"ol\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 9\n    }\n  }, \"Turn on the device via switch.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 9\n    }\n  }, \"Click on the \\\"Pair Device\\\" button below.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 9\n    }\n  }, \"Straighten your leg and place in a stable position.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 9\n    }\n  }, \"Place the silicone sheet on the front of the knee.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 9\n    }\n  }, \"Close the buckles on the back of the knee.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 9\n    }\n  }, \"Click on the \\\"Take Measurement\\\" button below.\")), /*#__PURE__*/React.createElement(Stack, {\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    onClick: function onClick() {\n      return connectToBle();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 9\n    }\n  }, \"Pair Device\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    onClick: function onClick() {\n      return takeMeasurement();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 9\n    }\n  }, \"Take Measurement\"), /*#__PURE__*/React.createElement(Snackbar, {\n    open: open,\n    autoHideDuration: severity === \"success\" ? 750 : 750,\n    onClose: function onClose() {\n      return setOpen(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Alert, {\n    severity: severity,\n    sx: {\n      width: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 11\n    }\n  }, message))));\n}","map":{"version":3,"sources":["/Users/zachary/capstone/madsense-app/src/MeasurementPage.js"],"names":["Box","Button","Stack","Snackbar","Alert","Typography","React","p5ble","blueTooth","blueToothCharacteristic","isConnected","firstRead","normalizer","MeasurementPage","props","receivedValues","lenSlopes","lenIntercepts","driftCorrection","senWidth","sleeveLen","startTime","useState","open","setOpen","message","setMessage","severity","setSeverity","sendData","command","inputValue","window","console","log","enc","TextEncoder","writeValue","encode","showSnackbar","takeMeasurement","processAndUpdate","time","Date","toLocaleDateString","sensorReadings","lengths","vol","i","Number","slice","Math","pow","PI","addMeasurement","lens","Array","from","date","processHackAndUpdate","noWorkingSensors","lowerWorkingNeighbor","upperWorkingNeighbor","secondLowerWorkingNeighbor","secondUpperWorkingNeighbor","random","rawVals","now","gotValue","value","connectToBle","serviceUuid","connect","gotCharacteristics","error","characteristics","startNotifications","onDisconnected","width"],"mappings":"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","sourcesContent":["import { Box, Button, Stack, Snackbar, Alert, Typography } from \"@mui/material\";\nimport React from \"react\";\n\nimport { p5ble } from \"./btUtils\";\n\n// these are global constants right here, but might need to be moved to state variables\nlet blueTooth = new p5ble();\nlet blueToothCharacteristic; //this is a blu\nlet isConnected = false;\nlet firstRead = true;\nlet normalizer = 1;\n\n\nexport default function MeasurementPage(props) {\n  const receivedValues = [\n    \"s1: 0.0\",\n    \"s2: 0.0\",\n    \"s3: 0.0\",\n    \"s4: 0.0\",\n    \"s5: 0.0\",\n    \"s6: 0.0\",\n    \"s7: 0.0\",\n    \"s8: 0.0\",\n  ];\n\n  // preset parameters for converting voltage to length and volume\n\n  const lenSlopes = [\n    0.038364286,\n    0.025627703,\n    0.019189762,\n    0.019665048,\n    0.020077975,\n    0.019665048,\n    0.020077975,\n  ];\n  const lenIntercepts = [\n    -80.51120509,\n    -47.37641793,\n    -30.61590649,\n    -31.82615128,\n    -32.85358599,\n    -31.82615128,\n    -32.85358599,\n  ];\n  // const lenSlopes = [\n  //   0.038364286,\n  //   0.025627703,\n  //   0.019189762,\n  //   0.019665048,\n  //   0.020077975,\n  //   0.0094725,\n  //   0.006184976,\n  // ];\n  // const lenIntercepts = [\n  //   -80.51120509,\n  //   -47.37641793,\n  //   -30.61590649,\n  //   -31.82615128,\n  //   -32.85358599,\n  //   -5.33530084,\n  //   3.204898594,\n  // ];\n\n\n  const driftCorrection = [\n    1.108454409,\n    1.001650797,\n    0.792195116,\n    0.793927949,\n    0.661928129,\n    0.819545948,\n    0.954697719,\n  ];\n\n  const senWidth = 2.5 // width of sensor piecewise slice, in cm\n  const sleeveLen = 12 //length of sleeve to add to variable length circumference\n  var startTime;\n\n  const [open, setOpen] = React.useState(false);\n  const [message, setMessage] = React.useState(\"\");\n  const [severity, setSeverity] = React.useState(\"info\");\n\n  function sendData(command) {\n    const inputValue = command;\n    if (!(\"TextEncoder\" in window)) {\n      console.log(\"Sorry, this browser does not support TextEncoder...\");\n    }\n    var enc = new TextEncoder(); // always utf-8\n    blueToothCharacteristic.writeValue(enc.encode(inputValue));\n  }\n\n  function showSnackbar(message, severity = \"info\") {\n    setMessage(message);\n    setSeverity(severity);\n    setOpen(true);\n  }\n\n  function takeMeasurement() {\n    showSnackbar(\"Taking measurement\")\n    if (isConnected) {\n      sendData(\"READ\");\n    // } else if (mock) {\n    //   console.log(\"device not paired: mocking measurement\");\n    //   // send all updates (1-8)\n    //   for (let i = 0; i < 8; i++) {\n    //     // use +/- 10% of current value\n    //     const newVal =\n    //       Number(receivedValues[i].slice(3, 100)) * (Math.random() * 0.2 + 0.9);\n    //     gotValue(`${i + 1}: ${newVal}`);\n    //   }\n    } else {\n      console.log(\"Error: device not paired.\");\n    }\n    console.log(\"ready to write\");\n  }\n\n  function processAndUpdate() {\n    let time = new Date().toLocaleDateString(\"en-US\");\n    let sensorReadings = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\n    let lengths = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\n    let vol = 0.0;\n\n    // get int array of sensor readings from str, and lengths using linear regression model\n    for (let i = 0; i < 7; i++) {\n      sensorReadings[i] = Number(receivedValues[i].slice(3, 100));\n      lengths[i] = lenSlopes[i] * sensorReadings[i] + lenIntercepts[i];\n      console.log(\"sensor: \", sensorReadings[i]);\n      console.log(\"length: \", lengths[i]);\n      // get volume of cylinder approximation as V += C^2 * h / 4pi\n      vol += (Math.pow(lengths[i] + sleeveLen, 2) * senWidth) / (4 * Math.PI);\n    }\n    console.log(\"volume: \", vol);\n\n    // update with new measurements\n    props.addMeasurement({\n      lens: Array.from(lengths),\n      vol: vol,\n      date: time,\n    });\n    showSnackbar(\"Measurement Added\", \"success\");\n  }\n\n  function processHackAndUpdate() {\n    let time = new Date().toLocaleDateString(\"en-US\");\n    let sensorReadings = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\n    let lengths = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\n    let vol = 0.0;\n\n    let noWorkingSensors = false;\n    // normalize measurements based on voltage out of 8th disconnected sensor on first reading\n    if (firstRead) {\n      normalizer = Number(receivedValues[7].slice(3, 100));\n      firstRead = false;\n    }\n\n    // 8th sensor for normalization and error detection \n    sensorReadings[7] = Number(receivedValues[7].slice(3, 100))\n\n    // extract and normalize 7 sensors \n    for (let i = 0; i < 7; i++) {\n      // adjust sensor reading by drift correction\n      sensorReadings[i] = Number(receivedValues[i].slice(3, 100)) + (normalizer - sensorReadings[7])/driftCorrection[i]\n      console.log(\"normalized sensor \", i + 1, \" :\", sensorReadings[i]);\n    }\n\n    // broken sensor detection\n    for (let i = 0; i < 7; i++) {\n      // if sensor detected as broken\n      if (sensorReadings[i] > (sensorReadings[7] * 0.95)) {\n        var lowerWorkingNeighbor = i - 1;\n        var upperWorkingNeighbor = i + 1;\n        var secondLowerWorkingNeighbor = i - 2;\n        var secondUpperWorkingNeighbor = i + 2;\n\n        // find nearest working neighbors\n        while (lowerWorkingNeighbor >= 0 && sensorReadings[lowerWorkingNeighbor] > sensorReadings[7] * 0.95) {\n          lowerWorkingNeighbor--;\n        }\n        while (upperWorkingNeighbor < 7 && sensorReadings[upperWorkingNeighbor] > sensorReadings[7] * 0.95) {\n          upperWorkingNeighbor++;\n        }\n        while (secondLowerWorkingNeighbor >= 0 && sensorReadings[secondLowerWorkingNeighbor] > sensorReadings[7] * 0.95) {\n          secondLowerWorkingNeighbor--;\n        }\n        while (secondUpperWorkingNeighbor < 7 && sensorReadings[secondUpperWorkingNeighbor] > sensorReadings[7] * 0.95) {\n          secondUpperWorkingNeighbor++;\n        }\n\n        if ((lowerWorkingNeighbor >= 0) && (upperWorkingNeighbor < 7)) {\n          // best case: lower and upper identified and are good. then do linear interpolation b/t two vals.\n          sensorReadings[i] = (sensorReadings[lowerWorkingNeighbor] + sensorReadings[upperWorkingNeighbor]) / 2;\n        } else if (lowerWorkingNeighbor >= 0) {\n          // if only lower neighbor -- just have equal to lower neighbor\n          if (secondLowerWorkingNeighbor >= 0) {\n            // if two lower neighbors, then interpolate upwards\n            sensorReadings[i] = sensorReadings[lowerWorkingNeighbor] + (sensorReadings[lowerWorkingNeighbor] - sensorReadings[secondLowerWorkingNeighbor]);\n          } else {\n            sensorReadings[i] = sensorReadings[lowerWorkingNeighbor];\n          }\n        } else if (upperWorkingNeighbor < 7) {\n          // if only upper neighbor -- just have equal upper neighbor\n          if (secondUpperWorkingNeighbor < 7) {\n            // if two upper neighbors, then interpolate downwards\n            sensorReadings[i] = sensorReadings[upperWorkingNeighbor] + (sensorReadings[upperWorkingNeighbor] - sensorReadings[secondUpperWorkingNeighbor]);\n          } else {\n            sensorReadings[i] = sensorReadings[upperWorkingNeighbor];\n          }\n        } else {\n          // if no working sensor at all - just load in dummy values\n          noWorkingSensors = true\n        }\n      }\n      console.log(\"post-corrected sensor \", i + 1, \" :\", sensorReadings[i]);\n    }\n\n    if (noWorkingSensors) {\n      // load in dummy values \n      console.log(\"no working sensors. loading dummy values...\")\n      sensorReadings[0] = 2695.14 + Math.random() * 3\n      sensorReadings[1] = 2717.32 + Math.random() * 3\n      sensorReadings[2] = 2726.43 + Math.random() * 3\n      sensorReadings[3] = 2728.12 + Math.random() * 3\n      sensorReadings[4] = 2743.54 + Math.random() * 3\n      sensorReadings[5] = 2714.99 + Math.random() * 3\n      sensorReadings[6] = 2697.58 + Math.random() * 3\n    }\n\n    // get lengths, volumes\n    for (let i = 0; i < 7; i++) {\n      lengths[i] = lenSlopes[i] * (sensorReadings[i]) + lenIntercepts[i];\n      //console.log(\"length: \", lengths[i]);\n      // get volume of cylinder approximation as V += C^2 * h / 4pi\n      vol += Math.pow((lengths[i] + sleeveLen), 2) * senWidth / (4 * Math.PI);\n    }\n    showSnackbar(\"Measurement Added\", \"success\");\n    // update with new measurements\n    props.addMeasurement({\n      lens: Array.from(lengths),\n      rawVals: sensorReadings,\n      vol: vol,\n      date: time,\n      time: (Date.now() - startTime),\n    })\n  }\n\n\n  // A function that will be called once got values\n  function gotValue(value) {\n    console.log(\"value: \", value);\n\n    // arrays are 0 indexed, but we use 1-8 in bluetooth value\n    receivedValues[Number(value[0]) - 1] = value;\n\n    // signal 8 is used to signal completion (I think?)\n    if (Number(value[0]) >= 7) {\n      processHackAndUpdate();\n    }\n  }\n\n  function connectToBle() {\n    // Connect to a device by passing the service UUID\n    let serviceUuid = 0xffe0;\n    blueTooth.connect(serviceUuid, gotCharacteristics);\n  }\n\n  // A function that will be called once got characteristics\n  function gotCharacteristics(error, characteristics) {\n    if (error) {\n      showSnackbar(`Error connecting to bluetooth: ${error}`, \"error\");\n    } else {\n      console.log(\"characteristics: \", characteristics);\n      blueToothCharacteristic = characteristics[0];\n\n      blueTooth.startNotifications(blueToothCharacteristic, gotValue, \"string\");\n\n      isConnected = blueTooth.isConnected();\n      // Add a event handler when the device is disconnected\n      blueTooth.onDisconnected(onDisconnected);\n      //setOpen(false);\n      showSnackbar(\"Device Paired\", \"success\");\n    }\n  }\n\n  function onDisconnected() {\n    console.log(\"Device got disconnected.\");\n    isConnected = false;\n    showSnackbar(\"Device disconnected.\")\n  }\n\n  return (\n    <Box px={10} py={5}>\n      <Typography variant=\"h5\">Instructions</Typography>\n      <ol>\n        <li>Turn on the device via switch.</li>\n        <li>Click on the \"Pair Device\" button below.</li>\n        <li>Straighten your leg and place in a stable position.</li>\n        <li>Place the silicone sheet on the front of the knee.</li>\n        <li>Close the buckles on the back of the knee.</li>\n        <li>Click on the \"Take Measurement\" button below.</li>\n      </ol>\n      <Stack spacing={2}>\n        <Button variant=\"contained\" onClick={() => connectToBle()}>\n          Pair Device\n        </Button>\n        <Button variant=\"contained\" onClick={() => takeMeasurement()}>\n          Take Measurement\n        </Button>\n        <Snackbar\n          open={open}\n          autoHideDuration={severity === \"success\" ? 750 : 750}\n          onClose={() => setOpen(false)}\n        >\n          <Alert severity={severity} sx={{ width: \"100%\" }}>\n            {message}\n          </Alert>\n        </Snackbar>\n      </Stack>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}