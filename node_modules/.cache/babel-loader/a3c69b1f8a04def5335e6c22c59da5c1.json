{"ast":null,"code":"var _jsxFileName = \"/Users/zachary/capstone/madsense-app/src/MeasurementPage.js\",\n    _s = $RefreshSig$();\n\nimport { ClassNames } from \"@emotion/react\";\nimport { Box, Button, Modal, Typography, TextField, Stack } from \"@mui/material\";\nimport React from \"react\";\nimport { p5ble } from \"./btUtils\"; // these are global constants right here, but might need to be moved to state variables\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet blueTooth = new p5ble();\nlet blueToothCharacteristic; //this is a blu\n\nlet isConnected = false;\n\nfunction connectToBle() {\n  // Connect to a device by passing the service UUID\n  let serviceUuid = 0xffe0;\n  blueTooth.connect(serviceUuid, gotCharacteristics);\n} // A function that will be called once got characteristics\n\n\nfunction gotCharacteristics(error, characteristics) {\n  if (error) {\n    console.log(\"error: \", error);\n  }\n\n  console.log(\"characteristics: \", characteristics);\n  blueToothCharacteristic = characteristics[0];\n  blueTooth.startNotifications(blueToothCharacteristic, gotValue, \"string\");\n  isConnected = blueTooth.isConnected(); // Add a event handler when the device is disconnected\n\n  blueTooth.onDisconnected(onDisconnected);\n}\n\nfunction onDisconnected() {\n  console.log(\"Device got disconnected.\");\n  isConnected = false;\n}\n\nexport default function MeasurementPage(props) {\n  _s();\n\n  const style = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: 600,\n    bgcolor: \"background.paper\",\n    border: \"2px solid #000\",\n    boxShadow: 24,\n    p: 4\n  };\n  const receivedValues = [\"s1: 0.0\", \"s2: 0.0\", \"s3: 0.0\", \"s4: 0.0\", \"s5: 0.0\", \"s6: 0.0\", \"s7: 0.0\", \"s8: 0.0\"];\n  const sensorReadings = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\n  let [open, setOpen] = React.useState(false);\n  let [length, setLength] = React.useState(0);\n\n  function recordSensors(length) {\n    console.log(\"recorded length: \", length);\n    return;\n  }\n\n  function sendData(command) {\n    const inputValue = command;\n\n    if (!(\"TextEncoder\" in window)) {\n      console.log(\"Sorry, this browser does not support TextEncoder...\");\n    }\n\n    var enc = new TextEncoder(); // always utf-8\n\n    blueToothCharacteristic.writeValue(enc.encode(inputValue));\n  }\n\n  function takeMeasurement() {\n    let mock = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    readComplete = false;\n    let time = new Date().toLocaleDateString(\"en-US\");\n\n    if (isConnected) {\n      sendData(\"READ\");\n    } else {\n      console.log(\"Error: device not paired.\");\n\n      if (mock) {\n        return {\n          vals: Array.from({\n            length: 7\n          }, () => Math.random() * 10),\n          date: time\n        };\n      }\n    }\n\n    console.log(\"ready to write\");\n\n    for (let i = 0; i < 7; i++) {\n      sensorReadings[i] = Number(receivedValues[i].slice(3, 100));\n      console.log(\"reading: \", sensorReadings[i]);\n    }\n\n    return {\n      vals: Array.from(sensorReadings),\n      date: time\n    };\n  } // A function that will be called once got values\n\n\n  function gotValue(value) {\n    console.log(\"value: \", value);\n    receivedValues[value[0]] = value;\n\n    if (Number(value[0]) >= 7) {\n      readComplete = true;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      open: open,\n      onClose: () => setOpen(false),\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: style,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          id: \"modal-modal-title\",\n          variant: \"h6\",\n          component: \"h2\",\n          children: \"Text in a modal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          id: \"modal-modal-description\",\n          sx: {\n            mt: 2\n          },\n          children: \"Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Turn on the device using the toggle switch.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Click on the \\\"Pair Device\\\" button.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Straighten your leg and put on the device. Make sure to place the silicone sheet on the front of the knee, then close the buckles on the back of the knee.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Click on the \\\"Take Measurement\\\" button and wait until measurement is complete.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      onClick: () => props.addMeasurement(takeMeasurement(true)),\n      children: \"Take Measurement\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      onClick: () => connectToBle(),\n      children: \"Pair Device\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stack, {\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        required: true,\n        fullWidth: true,\n        color: \"secondary\",\n        variant: \"outlined\",\n        label: \"Length\",\n        onChange: e => setLength(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        onClick: () => recordSensors(length),\n        children: \"Record Sensors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MeasurementPage, \"NAzr69fA7HPmvLOHFFvK2c8KOTc=\");\n\n_c = MeasurementPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeasurementPage\");","map":{"version":3,"sources":["/Users/zachary/capstone/madsense-app/src/MeasurementPage.js"],"names":["ClassNames","Box","Button","Modal","Typography","TextField","Stack","React","p5ble","blueTooth","blueToothCharacteristic","isConnected","connectToBle","serviceUuid","connect","gotCharacteristics","error","characteristics","console","log","startNotifications","gotValue","onDisconnected","MeasurementPage","props","style","position","top","left","transform","width","bgcolor","border","boxShadow","p","receivedValues","sensorReadings","open","setOpen","useState","length","setLength","recordSensors","sendData","command","inputValue","window","enc","TextEncoder","writeValue","encode","takeMeasurement","mock","readComplete","time","Date","toLocaleDateString","vals","Array","from","Math","random","date","i","Number","slice","value","mt","addMeasurement","e","target"],"mappings":"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","sourcesContent":["import { ClassNames } from \"@emotion/react\";\nimport { Box, Button, Modal, Typography, TextField, Stack } from \"@mui/material\";\nimport React from \"react\";\n\nimport { p5ble } from \"./btUtils\";\n\n// these are global constants right here, but might need to be moved to state variables\n\nlet blueTooth = new p5ble();\nlet blueToothCharacteristic; //this is a blu\nlet isConnected = false;\n\nfunction connectToBle() {\n  // Connect to a device by passing the service UUID\n  let serviceUuid = 0xffe0;\n  blueTooth.connect(serviceUuid, gotCharacteristics);\n}\n\n// A function that will be called once got characteristics\nfunction gotCharacteristics(error, characteristics) {\n  if (error) {\n    console.log(\"error: \", error);\n  }\n  console.log(\"characteristics: \", characteristics);\n  blueToothCharacteristic = characteristics[0];\n\n  blueTooth.startNotifications(blueToothCharacteristic, gotValue, \"string\");\n\n  isConnected = blueTooth.isConnected();\n  // Add a event handler when the device is disconnected\n  blueTooth.onDisconnected(onDisconnected);\n}\n\n\nfunction onDisconnected() {\n  console.log(\"Device got disconnected.\");\n  isConnected = false;\n}\n\nexport default function MeasurementPage(props) {\n  const style = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: 600,\n    bgcolor: \"background.paper\",\n    border: \"2px solid #000\",\n    boxShadow: 24,\n    p: 4,\n  };\n  const receivedValues = [\n    \"s1: 0.0\",\n    \"s2: 0.0\",\n    \"s3: 0.0\",\n    \"s4: 0.0\",\n    \"s5: 0.0\",\n    \"s6: 0.0\",\n    \"s7: 0.0\",\n    \"s8: 0.0\",\n  ];\n  const sensorReadings = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\n  let [open, setOpen] = React.useState(false);\n  let [length, setLength] = React.useState(0);\n\n  function recordSensors(length) {\n    console.log(\"recorded length: \", length);\n    return\n  }\n\n  function sendData(command) {\n    const inputValue = command;\n    if (!(\"TextEncoder\" in window)) {\n      console.log(\"Sorry, this browser does not support TextEncoder...\");\n    }\n    var enc = new TextEncoder(); // always utf-8\n    blueToothCharacteristic.writeValue(enc.encode(inputValue));\n  }\n\n  function takeMeasurement(mock = false) {\n    readComplete = false;\n    let time = new Date().toLocaleDateString(\"en-US\");\n    if (isConnected) {\n      sendData(\"READ\");\n    } else {\n      console.log(\"Error: device not paired.\");\n      if (mock) {\n        return {\n          vals: Array.from({ length: 7 }, () => Math.random() * 10),\n          date: time,\n        };\n      }\n    }\n    console.log(\"ready to write\");\n    for (let i = 0; i < 7; i++) {\n      sensorReadings[i] = Number(receivedValues[i].slice(3, 100));\n      console.log(\"reading: \", sensorReadings[i]);\n    }\n    return {\n      vals: Array.from(sensorReadings),\n      date: time,\n    };\n  }\n\n  // A function that will be called once got values\n  function gotValue(value) {\n    console.log(\"value: \", value);\n    receivedValues[value[0]] = value;\n    if (Number(value[0]) >= 7) {\n      readComplete = true;\n    }\n  }\n\n\n  return (\n    <Box>\n      <Modal open={open} onClose={() => setOpen(false)}>\n        <Box sx={style}>\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n            Text in a modal\n          </Typography>\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\n            Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\n          </Typography>\n        </Box>\n      </Modal>\n      <ol>\n        <li>Turn on the device using the toggle switch.</li>\n        <li>Click on the \"Pair Device\" button.</li>\n        <li>Straighten your leg and put on the device. Make sure to place the silicone sheet on the front of the knee, then close the buckles on the back of the knee.</li>\n        <li>Click on the \"Take Measurement\" button and wait until measurement is complete.</li>\n      </ol>\n      <Button \n      variant=\"outlined\"\n      onClick={() => props.addMeasurement(takeMeasurement(true))}>\n        Take Measurement\n      </Button>\n      <Button \n      variant=\"outlined\"\n      onClick={() => connectToBle()}>\n        Pair Device\n        </Button>\n      <div></div>\n      <Stack>\n        <TextField\n          required\n          fullWidth\n          color=\"secondary\"\n          variant=\"outlined\"\n          label=\"Length\"\n          onChange={(e) => setLength(e.target.value)}\n        />\n        <Button \n          variant=\"outlined\"\n          onClick={() => recordSensors(length)}>\n            Record Sensors\n        </Button>\n      </Stack>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}