{"ast":null,"code":"var _jsxFileName = \"/Users/zachary/capstone/madsense-app/src/MeasurementPage.js\",\n    _s = $RefreshSig$();\n\nimport { Box, Button, Modal, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport p5ble from \"p5ble\"; // these are global constants right here, but might need to be moved to state variables\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst receivedValues = [\"s1: 0.0\", \"s2: 0.0\", \"s3: 0.0\", \"s4: 0.0\", \"s5: 0.0\", \"s6: 0.0\", \"s7: 0.0\", \"s8: 0.0\"];\nlet isConnected = false;\nconsole.log(\"setting up...\");\nlet blueTooth = new p5ble();\nlet blueToothCharacteristic; //this is a blu\n\nfunction sleep(milliseconds) {\n  const date = Date.now();\n  let currentDate = null;\n\n  do {\n    currentDate = Date.now();\n  } while (currentDate - date < milliseconds);\n}\n\nfunction takeMeasurement() {\n  if (isConnected) {\n    sendData(\"READ\");\n    sleep(1000);\n  } else {\n    console.log(\"Error: device not paired.\");\n  }\n\n  let time = new Date().toLocaleDateString(\"en-US\");\n  console.log(receivedValues[0]);\n  console.log(receivedValues[1]);\n  console.log(receivedValues[2]);\n  console.log(receivedValues[3]);\n  console.log(receivedValues[4]);\n  console.log(receivedValues[5]);\n  console.log(receivedValues[6]);\n  console.log(receivedValues[7]);\n  return {\n    vals: Array.from({\n      length: 7\n    }, () => Math.random() * 10),\n    date: time\n  };\n}\n\nfunction connectToBle() {\n  // Connect to a device by passing the service UUID\n  //let serviceUuid = \"0xffe0\"\n  //blueTooth.connect({ filters: [{ services: [serviceUuid] }]}, gotCharacteristics);\n  blueTooth.connect({\n    filters: [{\n      acceptAllDevices: true\n    }]\n  }, gotCharacteristics);\n} // A function that will be called once got characteristics\n\n\nfunction gotCharacteristics(error, characteristics) {\n  if (error) {\n    console.log(\"error: \", error);\n  }\n\n  console.log(\"characteristics: \", characteristics);\n  blueToothCharacteristic = characteristics[0];\n  blueTooth.startNotifications(blueToothCharacteristic, gotValue, \"string\");\n  isConnected = blueTooth.isConnected(); // Add a event handler when the device is disconnected\n\n  blueTooth.onDisconnected(onDisconnected);\n} // A function that will be called once got values\n\n\nfunction gotValue(value) {\n  console.log(\"value: \", value);\n  receivedValues[value[0]] = value;\n}\n\nfunction onDisconnected() {\n  console.log(\"Device got disconnected.\");\n  isConnected = false;\n}\n\nfunction sendData(command) {\n  const inputValue = command;\n\n  if (!(\"TextEncoder\" in window)) {\n    console.log(\"Sorry, this browser does not support TextEncoder...\");\n  }\n\n  var enc = new TextEncoder(); // always utf-8\n\n  blueToothCharacteristic.writeValue(enc.encode(inputValue));\n}\n\nexport default function MeasurementPage(props) {\n  _s();\n\n  const style = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: 600,\n    bgcolor: \"background.paper\",\n    border: \"2px solid #000\",\n    boxShadow: 24,\n    p: 4\n  };\n  let [open, setOpen] = React.useState(false);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      open: open,\n      onClose: () => setOpen(false),\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: style,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          id: \"modal-modal-title\",\n          variant: \"h6\",\n          component: \"h2\",\n          children: \"Text in a modal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          id: \"modal-modal-description\",\n          sx: {\n            mt: 2\n          },\n          children: \"Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Put on the device\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"TBD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"3rd thing here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => props.addMeasurement(takeMeasurement()),\n      children: \"Take Measurement!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => connectToBle(),\n      children: \"Pair Device\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MeasurementPage, \"xG1TONbKtDWtdOTrXaTAsNhPg/Q=\");\n\n_c = MeasurementPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeasurementPage\");","map":{"version":3,"sources":["/Users/zachary/capstone/madsense-app/src/MeasurementPage.js"],"names":["Box","Button","Modal","Typography","React","p5ble","receivedValues","isConnected","console","log","blueTooth","blueToothCharacteristic","sleep","milliseconds","date","Date","now","currentDate","takeMeasurement","sendData","time","toLocaleDateString","vals","Array","from","length","Math","random","connectToBle","connect","filters","acceptAllDevices","gotCharacteristics","error","characteristics","startNotifications","gotValue","onDisconnected","value","command","inputValue","window","enc","TextEncoder","writeValue","encode","MeasurementPage","props","style","position","top","left","transform","width","bgcolor","border","boxShadow","p","open","setOpen","useState","mt","addMeasurement"],"mappings":"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","sourcesContent":["import { Box, Button, Modal, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport p5ble from \"p5ble\";\n\n// these are global constants right here, but might need to be moved to state variables\nconst receivedValues = [\"s1: 0.0\", \"s2: 0.0\", \"s3: 0.0\", \"s4: 0.0\", \"s5: 0.0\", \"s6: 0.0\", \"s7: 0.0\", \"s8: 0.0\"];\nlet isConnected = false;\nconsole.log(\"setting up...\")\nlet blueTooth = new p5ble();\nlet blueToothCharacteristic; //this is a blu\n\nfunction sleep(milliseconds) {\n  const date = Date.now();\n  let currentDate = null;\n  do {\n    currentDate = Date.now();\n  } while (currentDate - date < milliseconds);\n}\n\nfunction takeMeasurement() {\n  if (isConnected) {\n    sendData(\"READ\");\n    sleep(1000);\n  } else {\n    console.log(\"Error: device not paired.\")\n  }\n  \n  let time = new Date().toLocaleDateString(\"en-US\");\n  console.log(receivedValues[0])\n  console.log(receivedValues[1])\n  console.log(receivedValues[2])\n  console.log(receivedValues[3])\n  console.log(receivedValues[4])\n  console.log(receivedValues[5])\n  console.log(receivedValues[6])\n  console.log(receivedValues[7])\n\n  return {\n    vals: Array.from({ length: 7 }, () => Math.random() * 10),\n    date: time,\n  };\n}\n\nfunction connectToBle() {\n  // Connect to a device by passing the service UUID\n  //let serviceUuid = \"0xffe0\"\n  \n  //blueTooth.connect({ filters: [{ services: [serviceUuid] }]}, gotCharacteristics);\n  blueTooth.connect({ filters: [{ acceptAllDevices: true }]}, gotCharacteristics);\n}\n\n// A function that will be called once got characteristics\nfunction gotCharacteristics(error, characteristics) {\n  if (error) {\n    console.log(\"error: \", error);\n  }\n  console.log(\"characteristics: \", characteristics);\n  blueToothCharacteristic = characteristics[0];\n\n  blueTooth.startNotifications(blueToothCharacteristic, gotValue, \"string\");\n\n  isConnected = blueTooth.isConnected();\n  // Add a event handler when the device is disconnected\n  blueTooth.onDisconnected(onDisconnected);\n}\n\n// A function that will be called once got values\nfunction gotValue(value) {\n  console.log(\"value: \", value);\n  receivedValues[value[0]] = value;\n}\n\nfunction onDisconnected() {\n  console.log(\"Device got disconnected.\");\n  isConnected = false;\n}\n\nfunction sendData(command) {\n  const inputValue = command;\n  if (!(\"TextEncoder\" in window)) {\n    console.log(\"Sorry, this browser does not support TextEncoder...\");\n  }\n  var enc = new TextEncoder(); // always utf-8\n  blueToothCharacteristic.writeValue(enc.encode(inputValue));\n}\n\nexport default function MeasurementPage(props) {\n  const style = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: 600,\n    bgcolor: \"background.paper\",\n    border: \"2px solid #000\",\n    boxShadow: 24,\n    p: 4,\n  };\n  let [open, setOpen] = React.useState(false);\n  return (\n    <Box>\n      <Modal open={open} onClose={() => setOpen(false)}>\n        <Box sx={style}>\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n            Text in a modal\n          </Typography>\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\n            Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\n          </Typography>\n        </Box>\n      </Modal>\n      <ol>\n        <li>Put on the device</li>\n        <li>TBD</li>\n        <li>3rd thing here</li>\n      </ol>\n      <Button onClick={() => props.addMeasurement(takeMeasurement())}>\n        Take Measurement!\n      </Button>\n      <Button onClick={() => connectToBle()}>Pair Device</Button>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}