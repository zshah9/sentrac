{"ast":null,"code":"var _jsxFileName = \"/Users/zachary/capstone/madsense-app/src/MeasurementPage.js\",\n    _s = $RefreshSig$();\n\nimport { ClassNames } from \"@emotion/react\";\nimport { Box, Button, Modal, Typography, TextField, Stack } from \"@mui/material\";\nimport React from \"react\";\nimport { p5ble } from \"./btUtils\"; // these are global constants right here, but might need to be moved to state variables\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet blueTooth = new p5ble();\nlet blueToothCharacteristic; //this is a blu\n\nlet isConnected = false;\nexport default function MeasurementPage(props) {\n  _s();\n\n  const style = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: 600,\n    bgcolor: \"background.paper\",\n    border: \"2px solid #000\",\n    boxShadow: 24,\n    p: 4\n  };\n  const receivedValues = [\"s1: 0.0\", \"s2: 0.0\", \"s3: 0.0\", \"s4: 0.0\", \"s5: 0.0\", \"s6: 0.0\", \"s7: 0.0\", \"s8: 0.0\"]; // const receivedValues = [\n  //     \"1: 2864.1\",\n  //     \"2: 2941.6\",\n  //     \"3: 3019.3\",\n  //     \"4: 3215.2\",\n  //     \"5: 3018.0\",\n  //     \"6: 2899.1\",\n  //     \"7: 2877.7\",\n  //     \"8: 0.0\",\n  //   ];\n  // preset parameters for converting voltage to length and volume\n  // const lenSlopes = [\n  //   0.0317106196450444, \n  //   0.0317106196450444, \n  //   0.0317106196450444, \n  //   0.0317106196450444, \n  //   0.0317106196450444, \n  //   0.0317106196450444, \n  //   0.0317106196450444\n  // ];\n  // const lenIntercepts = [\n  //   -67.1476688635025,\n  //   -67.1476688635025,\n  //   -67.1476688635025,\n  //   -67.1476688635025,\n  //   -67.1476688635025,\n  //   -67.1476688635025,\n  //   -67.1476688635025\n  // ];\n\n  const lenSlopes = [1, 1, 1, 1, 1, 1, 1];\n  const lenIntercepts = [0, 0, 0, 0, 0, 0, 0];\n  const senWidth = 3; // width of sensor piecewise slice, in cm\n\n  const sleeveLen = 10; //length of sleeve to add to variable length circumference\n\n  var startTime;\n  let [open, setOpen] = React.useState(false);\n\n  function sendData(command) {\n    const inputValue = command;\n\n    if (!(\"TextEncoder\" in window)) {\n      console.log(\"Sorry, this browser does not support TextEncoder...\");\n    }\n\n    var enc = new TextEncoder(); // always utf-8\n\n    blueToothCharacteristic.writeValue(enc.encode(inputValue));\n  }\n\n  function takeMeasurement() {\n    if (isConnected) {\n      sendData(\"READ\");\n    } else {\n      console.log(\"Error: device not paired.\");\n    }\n\n    console.log(\"ready to write\");\n  }\n\n  function processAndUpdate() {\n    let time = new Date().toLocaleDateString(\"en-US\");\n    let sensorReadings = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\n    let lengths = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\n    let vol = 0.0; // normalize measurements based on voltage out of 8th disconnected sensor\n\n    let normalizer = Number(receivedValues[7].slice(3, 100)); // get int array of sensor readings from str, and lengths using linear regression model\n\n    for (let i = 0; i < 7; i++) {\n      sensorReadings[i] = Number(receivedValues[i].slice(3, 100)); //* (Math.random()*0.2 + 0.9) ;\n\n      lengths[i] = lenSlopes[i] * (sensorReadings[i] / normalizer * 100) + lenIntercepts[i];\n      console.log(\"sensor: \", sensorReadings[i]);\n      console.log(\"length: \", lengths[i]); // get volume of cylinder approximation as V += C^2 * h / 4pi\n\n      vol += Math.pow(lengths[i] + sleeveLen, 2) * senWidth / (4 * Math.PI);\n    }\n\n    console.log(\"volume: \", vol); // update with new measurements\n\n    props.addMeasurement({\n      lens: Array.from(lengths),\n      vol: vol,\n      date: time,\n      time: Date.now() - startTime\n    });\n  } // A function that will be called once got values\n\n\n  function gotValue(value) {\n    console.log(\"value: \", value);\n    receivedValues[value[0]] = value;\n\n    if (Number(value[0]) >= 7) {\n      processAndUpdate();\n    }\n  }\n\n  function connectToBle() {\n    // Connect to a device by passing the service UUID\n    let serviceUuid = 0xffe0;\n    blueTooth.connect(serviceUuid, gotCharacteristics);\n    startTime = Date.now();\n  } // A function that will be called once got characteristics\n\n\n  function gotCharacteristics(error, characteristics) {\n    if (error) {\n      console.log(\"error: \", error);\n    }\n\n    console.log(\"characteristics: \", characteristics);\n    blueToothCharacteristic = characteristics[0];\n    blueTooth.startNotifications(blueToothCharacteristic, gotValue, \"string\");\n    isConnected = blueTooth.isConnected(); // Add a event handler when the device is disconnected\n\n    blueTooth.onDisconnected(onDisconnected);\n  }\n\n  function onDisconnected() {\n    console.log(\"Device got disconnected.\");\n    isConnected = false;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      open: open,\n      onClose: () => setOpen(false),\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: style,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          id: \"modal-modal-title\",\n          variant: \"h6\",\n          component: \"h2\",\n          children: \"Text in a modal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          id: \"modal-modal-description\",\n          sx: {\n            mt: 2\n          },\n          children: \"Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Turn on the device using the toggle switch.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Click on the \\\"Pair Device\\\" button.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Straighten your leg and put on the device. Make sure to place the silicone sheet on the front of the knee, then close the buckles on the back of the knee.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Click on the \\\"Take Measurement\\\" button and wait until measurement is complete.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      onClick: () => takeMeasurement(),\n      children: \"Take Measurement\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      onClick: () => connectToBle(),\n      children: \"Pair Device\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MeasurementPage, \"xG1TONbKtDWtdOTrXaTAsNhPg/Q=\");\n\n_c = MeasurementPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeasurementPage\");","map":{"version":3,"sources":["/Users/zachary/capstone/madsense-app/src/MeasurementPage.js"],"names":["ClassNames","Box","Button","Modal","Typography","TextField","Stack","React","p5ble","blueTooth","blueToothCharacteristic","isConnected","MeasurementPage","props","style","position","top","left","transform","width","bgcolor","border","boxShadow","p","receivedValues","lenSlopes","lenIntercepts","senWidth","sleeveLen","startTime","open","setOpen","useState","sendData","command","inputValue","window","console","log","enc","TextEncoder","writeValue","encode","takeMeasurement","processAndUpdate","time","Date","toLocaleDateString","sensorReadings","lengths","vol","normalizer","Number","slice","i","Math","pow","PI","addMeasurement","lens","Array","from","date","now","gotValue","value","connectToBle","serviceUuid","connect","gotCharacteristics","error","characteristics","startNotifications","onDisconnected","mt"],"mappings":"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","sourcesContent":["import { ClassNames } from \"@emotion/react\";\nimport { Box, Button, Modal, Typography, TextField, Stack } from \"@mui/material\";\nimport React from \"react\";\n\nimport { p5ble } from \"./btUtils\";\n\n// these are global constants right here, but might need to be moved to state variables\nlet blueTooth = new p5ble();\nlet blueToothCharacteristic; //this is a blu\nlet isConnected = false;\n\nexport default function MeasurementPage(props) {\n  const style = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: 600,\n    bgcolor: \"background.paper\",\n    border: \"2px solid #000\",\n    boxShadow: 24,\n    p: 4,\n  };\n  const receivedValues = [\n    \"s1: 0.0\",\n    \"s2: 0.0\",\n    \"s3: 0.0\",\n    \"s4: 0.0\",\n    \"s5: 0.0\",\n    \"s6: 0.0\",\n    \"s7: 0.0\",\n    \"s8: 0.0\",\n  ];\n  // const receivedValues = [\n  //     \"1: 2864.1\",\n  //     \"2: 2941.6\",\n  //     \"3: 3019.3\",\n  //     \"4: 3215.2\",\n  //     \"5: 3018.0\",\n  //     \"6: 2899.1\",\n  //     \"7: 2877.7\",\n  //     \"8: 0.0\",\n  //   ];\n\n  // preset parameters for converting voltage to length and volume\n  // const lenSlopes = [\n  //   0.0317106196450444, \n  //   0.0317106196450444, \n  //   0.0317106196450444, \n  //   0.0317106196450444, \n  //   0.0317106196450444, \n  //   0.0317106196450444, \n  //   0.0317106196450444\n  // ];\n  // const lenIntercepts = [\n  //   -67.1476688635025,\n  //   -67.1476688635025,\n  //   -67.1476688635025,\n  //   -67.1476688635025,\n  //   -67.1476688635025,\n  //   -67.1476688635025,\n  //   -67.1476688635025\n  // ];\n\n  const lenSlopes = [\n    1, \n    1, \n    1, \n    1, \n    1, \n    1, \n    1, \n  ];\n  const lenIntercepts = [\n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n    0, \n  ];\n  const senWidth = 3 // width of sensor piecewise slice, in cm\n  const sleeveLen = 10 //length of sleeve to add to variable length circumference\n  var startTime;\n  \n  let [open, setOpen] = React.useState(false);\n\n  function sendData(command) {\n    const inputValue = command;\n    if (!(\"TextEncoder\" in window)) {\n      console.log(\"Sorry, this browser does not support TextEncoder...\");\n    }\n    var enc = new TextEncoder(); // always utf-8\n    blueToothCharacteristic.writeValue(enc.encode(inputValue));\n  }\n\n  function takeMeasurement() {\n    if (isConnected) {\n      sendData(\"READ\");\n    } else {\n      console.log(\"Error: device not paired.\");\n    }\n    console.log(\"ready to write\");\n  }\n\n  function processAndUpdate() {\n    let time = new Date().toLocaleDateString(\"en-US\");\n    let sensorReadings = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\n    let lengths = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\n    let vol = 0.0;\n\n    // normalize measurements based on voltage out of 8th disconnected sensor\n    let normalizer = Number(receivedValues[7].slice(3, 100))\n    // get int array of sensor readings from str, and lengths using linear regression model\n    for (let i = 0; i < 7; i++) {\n      sensorReadings[i] = Number(receivedValues[i].slice(3, 100)) //* (Math.random()*0.2 + 0.9) ;\n      lengths[i] = lenSlopes[i]*(sensorReadings[i]/normalizer * 100) + lenIntercepts[i];\n      console.log(\"sensor: \", sensorReadings[i]);\n      console.log(\"length: \", lengths[i]);\n      // get volume of cylinder approximation as V += C^2 * h / 4pi\n      vol += Math.pow((lengths[i] + sleeveLen),2) * senWidth / (4*Math.PI);\n    }\n    console.log(\"volume: \", vol);\n\n    // update with new measurements\n    props.addMeasurement({\n      lens: Array.from(lengths),\n      vol: vol,\n      date: time,\n      time: (Date.now() - startTime),\n    })\n  }\n\n  // A function that will be called once got values\n  function gotValue(value) {\n    console.log(\"value: \", value);\n    receivedValues[value[0]] = value;\n    if (Number(value[0]) >= 7) {\n      processAndUpdate()\n    }\n  }\n\n  function connectToBle() {\n    // Connect to a device by passing the service UUID\n    let serviceUuid = 0xffe0;\n    blueTooth.connect(serviceUuid, gotCharacteristics);\n    startTime = Date.now()\n\n  }\n  \n  // A function that will be called once got characteristics\n  function gotCharacteristics(error, characteristics) {\n    if (error) {\n      console.log(\"error: \", error);\n    }\n    console.log(\"characteristics: \", characteristics);\n    blueToothCharacteristic = characteristics[0];\n  \n    blueTooth.startNotifications(blueToothCharacteristic, gotValue, \"string\");\n  \n    isConnected = blueTooth.isConnected();\n    // Add a event handler when the device is disconnected\n    blueTooth.onDisconnected(onDisconnected);\n  }\n  \n  function onDisconnected() {\n    console.log(\"Device got disconnected.\");\n    isConnected = false;\n  }\n\n\n  return (\n    <Box>\n      <Modal open={open} onClose={() => setOpen(false)}>\n        <Box sx={style}>\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n            Text in a modal\n          </Typography>\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\n            Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\n          </Typography>\n        </Box>\n      </Modal>\n      <ol>\n        <li>Turn on the device using the toggle switch.</li>\n        <li>Click on the \"Pair Device\" button.</li>\n        <li>Straighten your leg and put on the device. Make sure to place the silicone sheet on the front of the knee, then close the buckles on the back of the knee.</li>\n        <li>Click on the \"Take Measurement\" button and wait until measurement is complete.</li>\n      </ol>\n      <Button \n      variant=\"outlined\"\n      onClick={() => takeMeasurement()}>\n        Take Measurement\n      </Button>\n      <Button \n      variant=\"outlined\"\n      onClick={() => connectToBle()}>\n        Pair Device\n        </Button>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}