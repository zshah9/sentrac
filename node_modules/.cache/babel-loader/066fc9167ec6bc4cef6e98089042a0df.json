{"ast":null,"code":"var _jsxFileName = \"/Users/zachary/capstone/madsense-app/src/FinalResultsPage.js\";\nimport Box from \"@mui/system/Box\";\nimport SensorTimeGraph from \"./VolumeTimeGraph\";\nimport { Toolbar, List, ListItem, ListItemText, Drawer, Divider, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction splitMeasurements(measurements) {\n  let res = [];\n\n  if (measurements.vols.length <= 0) {\n    return res;\n  }\n\n  res.push(measurements.vols.map((e, j) => {\n    return {\n      val: measurements.vols[j],\n      date: measurements.dates[j]\n    };\n  }));\n  console.log(\"to plot: \", res);\n  return res;\n}\n\nfunction scrollIntoViewWithOffset(selector) {\n  let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 64;\n  window.scrollTo({\n    behavior: \"smooth\",\n    top: document.querySelector(selector).getBoundingClientRect().top - document.body.getBoundingClientRect().top - offset\n  });\n}\n\nexport default class FinalResultsPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.graphRefs = [];\n    this.state = {\n      graphRefs: []\n    };\n  }\n\n  render() {\n    if (!(this.props.measurements.vols.length > 0)) {\n      return /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        children: \"No volume data to display. Take a measurement first\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 14\n      }, this);\n    }\n\n    const calculatedVols = splitMeasurements(this.props.measurements);\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: \"flex\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Drawer, {\n        variant: \"permanent\",\n        sx: {\n          width: 150,\n          flexShrink: 0,\n          [`& .MuiDrawer-paper`]: {\n            width: 150,\n            boxSizing: \"border-box\"\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(Toolbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            overflow: \"auto\"\n          },\n          children: /*#__PURE__*/_jsxDEV(List, {\n            children: calculatedVols.map((_, index) => /*#__PURE__*/_jsxDEV(ListItem, {\n              button: true,\n              onClick: () => scrollIntoViewWithOffset(`#graph-${index}`),\n              children: /*#__PURE__*/_jsxDEV(ListItemText, {\n                primary: `Sensor ${index + 1}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 19\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        component: \"main\",\n        sx: {\n          flexGrow: 1,\n          p: 3\n        },\n        children: calculatedVols.map((e, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          id: `graph-${i}`,\n          ref: el => this.graphRefs[i] = el,\n          children: [/*#__PURE__*/_jsxDEV(SensorTimeGraph, {\n            data: e,\n            title: 'Volume vs. Time'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/zachary/capstone/madsense-app/src/FinalResultsPage.js"],"names":["Box","SensorTimeGraph","Toolbar","List","ListItem","ListItemText","Drawer","Divider","Typography","React","splitMeasurements","measurements","res","vols","length","push","map","e","j","val","date","dates","console","log","scrollIntoViewWithOffset","selector","offset","window","scrollTo","behavior","top","document","querySelector","getBoundingClientRect","body","FinalResultsPage","Component","constructor","props","graphRefs","state","render","calculatedVols","display","width","flexShrink","boxSizing","overflow","_","index","flexGrow","p","i","el"],"mappings":"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","sourcesContent":["import Box from \"@mui/system/Box\";\nimport SensorTimeGraph from \"./VolumeTimeGraph\";\nimport {\n  Toolbar,\n  List,\n  ListItem,\n  ListItemText,\n  Drawer,\n  Divider,\n  Typography,\n} from \"@mui/material\";\nimport React from \"react\";\n\nfunction splitMeasurements(measurements) {\n    let res = [];\n    if (measurements.vols.length <= 0) {\n        return res;\n    }\n    res.push(\n        measurements.vols.map((e, j) => {\n        return { val: measurements.vols[j], date: measurements.dates[j] };\n        })\n    );\n    console.log(\"to plot: \", res);\n    return res;\n}\n\nfunction scrollIntoViewWithOffset(selector, offset = 64) {\n  window.scrollTo({\n    behavior: \"smooth\",\n    top:\n      document.querySelector(selector).getBoundingClientRect().top -\n      document.body.getBoundingClientRect().top -\n      offset,\n  });\n}\n\nexport default class FinalResultsPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.graphRefs = [];\n    this.state = {\n      graphRefs: [],\n    };\n  }\n\n  render() {\n    if (!(this.props.measurements.vols.length > 0)) {\n      return <Typography align=\"center\">No volume data to display. Take a measurement first</Typography>;\n    }\n    const calculatedVols = splitMeasurements(this.props.measurements);\n    return (\n      <Box sx={{ display: \"flex\" }}>\n        <Drawer\n          variant=\"permanent\"\n          sx={{\n            width: 150,\n            flexShrink: 0,\n            [`& .MuiDrawer-paper`]: { width: 150, boxSizing: \"border-box\" },\n          }}\n        >\n          <Toolbar />\n          <Box sx={{ overflow: \"auto\" }}>\n            <List>\n              {calculatedVols.map((_, index) => (\n                <ListItem\n                  button\n                  key={index}\n                  onClick={() => scrollIntoViewWithOffset(`#graph-${index}`)}\n                >\n                  <ListItemText primary={`Sensor ${index + 1}`} />\n                </ListItem>\n              ))}\n            </List>\n          </Box>\n        </Drawer>\n        <Box component=\"main\" sx={{ flexGrow: 1, p: 3 }}>\n          {calculatedVols.map((e, i) => (\n            <div\n              id={`graph-${i}`}\n              key={i}\n              ref={(el) => (this.graphRefs[i] = el)}\n            >\n              <SensorTimeGraph data={e} title={'Volume vs. Time'} />\n              <Divider />\n\n            </div>\n          ))}\n        </Box>\n      </Box>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}