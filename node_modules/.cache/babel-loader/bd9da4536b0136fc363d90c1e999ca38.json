{"ast":null,"code":"var _jsxFileName = \"/Users/zachary/capstone/madsense-app/src/MeasurementPage.js\",\n    _s = $RefreshSig$();\n\nimport { Box, Button, Modal, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport { p5ble } from \"./btUtils\"; // these are global constants right here, but might need to be moved to state variables\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst receivedValues = [\"s1: 0.0\", \"s2: 0.0\", \"s3: 0.0\", \"s4: 0.0\", \"s5: 0.0\", \"s6: 0.0\", \"s7: 0.0\", \"s8: 0.0\"];\nconst sensorReadings = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\nlet isConnected = false;\nlet readComplete = false;\nconsole.log(\"setting up...\");\nlet blueTooth = new p5ble();\nlet blueToothCharacteristic; //this is a blu\n\nfunction takeMeasurement() {\n  readComplete = false;\n\n  if (isConnected) {\n    sendData(\"READ\");\n  } else {\n    console.log(\"Error: device not paired.\");\n  }\n\n  console.log(\"ready to write\");\n  let time = new Date().toLocaleDateString(\"en-US\");\n  return {\n    vals: receiveData(),\n    date: time\n  };\n}\n\nfunction receiveData() {\n  return Array.from(sensorReadings);\n}\n\nfunction connectToBle() {\n  // Connect to a device by passing the service UUID\n  let serviceUuid = 0xFFE0;\n  blueTooth.connect(serviceUuid, gotCharacteristics);\n} // A function that will be called once got characteristics\n\n\nfunction gotCharacteristics(error, characteristics) {\n  if (error) {\n    console.log(\"error: \", error);\n  }\n\n  console.log(\"characteristics: \", characteristics);\n  blueToothCharacteristic = characteristics[0];\n  blueTooth.startNotifications(blueToothCharacteristic, gotValue, \"string\");\n  isConnected = blueTooth.isConnected(); // Add a event handler when the device is disconnected\n\n  blueTooth.onDisconnected(onDisconnected);\n} // A function that will be called once got values\n\n\nfunction gotValue(value) {\n  console.log(\"value: \", value);\n  receivedValues[value[0]] = value;\n\n  if (Number(value[0]) >= 7) {\n    readComplete = true;\n\n    for (let i = 0; i < 7; i++) {\n      sensorReadings[i] = Number(receivedValues[i].slice(3, 100));\n      console.log(sensorReadings[i]);\n    }\n\n    props.addMeasurement({\n      vals: Array.from(sensorReadings),\n      date: time\n    });\n  }\n}\n\nfunction onDisconnected() {\n  console.log(\"Device got disconnected.\");\n  isConnected = false;\n}\n\nfunction sendData(command) {\n  const inputValue = command;\n\n  if (!(\"TextEncoder\" in window)) {\n    console.log(\"Sorry, this browser does not support TextEncoder...\");\n  }\n\n  var enc = new TextEncoder(); // always utf-8\n\n  blueToothCharacteristic.writeValue(enc.encode(inputValue));\n}\n\nexport default function MeasurementPage(props) {\n  _s();\n\n  const style = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: 600,\n    bgcolor: \"background.paper\",\n    border: \"2px solid #000\",\n    boxShadow: 24,\n    p: 4\n  };\n  let [open, setOpen] = React.useState(false);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      open: open,\n      onClose: () => setOpen(false),\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: style,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          id: \"modal-modal-title\",\n          variant: \"h6\",\n          component: \"h2\",\n          children: \"Text in a modal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          id: \"modal-modal-description\",\n          sx: {\n            mt: 2\n          },\n          children: \"Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Put on the device\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"TBD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"3rd thing here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => props.addMeasurement(takeMeasurement()),\n      children: \"Take Measurement!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => connectToBle(),\n      children: \"Pair Device\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MeasurementPage, \"xG1TONbKtDWtdOTrXaTAsNhPg/Q=\");\n\n_c = MeasurementPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeasurementPage\");","map":{"version":3,"sources":["/Users/zachary/capstone/madsense-app/src/MeasurementPage.js"],"names":["Box","Button","Modal","Typography","React","p5ble","receivedValues","sensorReadings","isConnected","readComplete","console","log","blueTooth","blueToothCharacteristic","takeMeasurement","sendData","time","Date","toLocaleDateString","vals","receiveData","date","Array","from","connectToBle","serviceUuid","connect","gotCharacteristics","error","characteristics","startNotifications","gotValue","onDisconnected","value","Number","i","slice","props","addMeasurement","command","inputValue","window","enc","TextEncoder","writeValue","encode","MeasurementPage","style","position","top","left","transform","width","bgcolor","border","boxShadow","p","open","setOpen","useState","mt"],"mappings":"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","sourcesContent":["import { Box, Button, Modal, Typography } from \"@mui/material\";\nimport React from \"react\";\n\nimport {\n  p5ble,\n} from \"./btUtils\";\n\n\n// these are global constants right here, but might need to be moved to state variables\nconst receivedValues = [\"s1: 0.0\", \"s2: 0.0\", \"s3: 0.0\", \"s4: 0.0\", \"s5: 0.0\", \"s6: 0.0\", \"s7: 0.0\", \"s8: 0.0\"];\nconst sensorReadings = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\nlet isConnected = false;\nlet readComplete = false;\nconsole.log(\"setting up...\")\nlet blueTooth = new p5ble();\nlet blueToothCharacteristic; //this is a blu\n\n\nfunction takeMeasurement() {\n  readComplete = false;\n  if (isConnected) {\n    sendData(\"READ\");\n  } else {\n    console.log(\"Error: device not paired.\");\n  }\n  \n\n  console.log(\"ready to write\");\n  let time = new Date().toLocaleDateString(\"en-US\");\n  return {\n    vals: receiveData(),\n    date: time,\n  };\n}\n\nfunction receiveData() {\n  return Array.from(sensorReadings);\n}\n\nfunction connectToBle() {\n  // Connect to a device by passing the service UUID\n  let serviceUuid = 0xFFE0;\n  blueTooth.connect(serviceUuid, gotCharacteristics);\n}\n\n// A function that will be called once got characteristics\nfunction gotCharacteristics(error, characteristics) {\n  if (error) {\n    console.log(\"error: \", error);\n  }\n  console.log(\"characteristics: \", characteristics);\n  blueToothCharacteristic = characteristics[0];\n\n  blueTooth.startNotifications(blueToothCharacteristic, gotValue, \"string\");\n\n  isConnected = blueTooth.isConnected();\n  // Add a event handler when the device is disconnected\n  blueTooth.onDisconnected(onDisconnected);\n}\n\n// A function that will be called once got values\nfunction gotValue(value) {\n  console.log(\"value: \", value);\n  receivedValues[value[0]] = value;\n  if (Number(value[0]) >= 7) {\n    readComplete = true;\n    for (let i = 0; i < 7; i++) {\n      sensorReadings[i] = Number(receivedValues[i].slice(3, 100));\n      console.log(sensorReadings[i]);\n    }\n    props.addMeasurement({vals: Array.from(sensorReadings), date: time })\n  }\n}\n\nfunction onDisconnected() {\n  console.log(\"Device got disconnected.\");\n  isConnected = false;\n}\n\nfunction sendData(command) {\n  const inputValue = command;\n  if (!(\"TextEncoder\" in window)) {\n    console.log(\"Sorry, this browser does not support TextEncoder...\");\n  }\n  var enc = new TextEncoder(); // always utf-8\n  blueToothCharacteristic.writeValue(enc.encode(inputValue));\n}\n\nexport default function MeasurementPage(props) {\n  const style = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: 600,\n    bgcolor: \"background.paper\",\n    border: \"2px solid #000\",\n    boxShadow: 24,\n    p: 4,\n  };\n  let [open, setOpen] = React.useState(false);\n  return (\n    <Box>\n      <Modal open={open} onClose={() => setOpen(false)}>\n        <Box sx={style}>\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n            Text in a modal\n          </Typography>\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\n            Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\n          </Typography>\n        </Box>\n      </Modal>\n      <ol>\n        <li>Put on the device</li>\n        <li>TBD</li>\n        <li>3rd thing here</li>\n      </ol>\n      <Button onClick={() => props.addMeasurement(takeMeasurement())}>\n        Take Measurement!\n      </Button>\n      <Button onClick={() => connectToBle()}>Pair Device</Button>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}