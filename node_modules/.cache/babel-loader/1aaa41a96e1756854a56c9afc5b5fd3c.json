{"ast":null,"code":"import _classCallCheck from \"/Users/zachary/capstone/madsense-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zachary/capstone/madsense-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * __  ___     _____                       _\n * \\ \\/ / |___| ____|_  ___ __   ___  _ __| |_\n *  \\  /| / __|  _| \\ \\/ / '_ \\ / _ \\| '__| __|\n *  /  \\| \\__ \\ |___ >  <| |_) | (_) | |  | |_\n * /_/\\_\\_|___/_____/_/\\_\\ .__/ \\___/|_|   \\__|\n *                       |_|\n * 6/12/2017\n * Daniel Blanco Parla\n * https://github.com/deblanco/xlsExport\n */\nvar XlsExport = /*#__PURE__*/function () {\n  // data: array of objects with the data for each row of the table\n  // name: title for the worksheet\n  function XlsExport(data) {\n    var title = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Worksheet';\n\n    _classCallCheck(this, XlsExport);\n\n    // input validation: new xlsExport([], String)\n    if (!Array.isArray(data) || typeof title !== 'string' || Object.prototype.toString.call(title) !== '[object String]') {\n      throw new Error('Invalid input types: new xlsExport(Array [], String)');\n    }\n\n    this._data = data;\n    this._title = title;\n  }\n\n  _createClass(XlsExport, [{\n    key: \"exportToXLS\",\n    value: function exportToXLS() {\n      var fileName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'export.xls';\n\n      if (typeof fileName !== 'string' || Object.prototype.toString.call(fileName) !== '[object String]') {\n        throw new Error('Invalid input type: exportToCSV(String)');\n      }\n\n      var TEMPLATE_XLS = \"\\n        <html xmlns:o=\\\"urn:schemas-microsoft-com:office:office\\\" xmlns:x=\\\"urn:schemas-microsoft-com:office:excel\\\" xmlns=\\\"http://www.w3.org/TR/REC-html40\\\">\\n        <meta http-equiv=\\\"content-type\\\" content=\\\"application/vnd.ms-excel; charset=UTF-8\\\"/>\\n        <head><!--[if gte mso 9]><xml>\\n        <x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{title}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml>\\n        <![endif]--></head>\\n        <body>{table}</body></html>\";\n      var MIME_XLS = 'application/vnd.ms-excel;base64,';\n      var parameters = {\n        title: this._title,\n        table: this.objectToTable()\n      };\n      var computeOutput = TEMPLATE_XLS.replace(/{(\\w+)}/g, function (x, y) {\n        return parameters[y];\n      });\n      var computedXLS = new Blob([computeOutput], {\n        type: MIME_XLS\n      });\n      var xlsLink = window.URL.createObjectURL(computedXLS);\n      this.downloadFile(xlsLink, fileName);\n    }\n  }, {\n    key: \"exportToCSV\",\n    value: function exportToCSV() {\n      var fileName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'export.csv';\n\n      if (typeof fileName !== 'string' || Object.prototype.toString.call(fileName) !== '[object String]') {\n        throw new Error('Invalid input type: exportToCSV(String)');\n      }\n\n      var computedCSV = new Blob([this.objectToSemicolons()], {\n        type: 'text/csv;charset=utf-8'\n      });\n      var csvLink = window.URL.createObjectURL(computedCSV);\n      this.downloadFile(csvLink, fileName);\n    }\n  }, {\n    key: \"downloadFile\",\n    value: function downloadFile(output, fileName) {\n      var link = document.createElement('a');\n      document.body.appendChild(link);\n      link.download = fileName;\n      link.href = output;\n      link.click();\n    }\n  }, {\n    key: \"toBase64\",\n    value: function toBase64(string) {\n      return window.btoa(unescape(encodeURIComponent(string)));\n    }\n  }, {\n    key: \"objectToTable\",\n    value: function objectToTable() {\n      // extract keys from the first object, will be the title for each column\n      var colsHead = \"<tr>\".concat(Object.keys(this._data[0]).map(function (key) {\n        return \"<td>\".concat(key, \"</td>\");\n      }).join(''), \"</tr>\");\n\n      var colsData = this._data.map(function (obj) {\n        return [\"<tr>\\n                \".concat(Object.keys(obj).map(function (col) {\n          return \"<td>\".concat(obj[col] ? obj[col] : '', \"</td>\");\n        }).join(''), \"\\n            </tr>\")];\n      }) // 'null' values not showed\n      .join('');\n\n      return \"<table>\".concat(colsHead).concat(colsData, \"</table>\").trim(); // remove spaces...\n    }\n  }, {\n    key: \"objectToSemicolons\",\n    value: function objectToSemicolons() {\n      var colsHead = Object.keys(this._data[0]).map(function (key) {\n        return [key];\n      }).join(';');\n\n      var colsData = this._data.map(function (obj) {\n        return [// obj === row\n        Object.keys(obj).map(function (col) {\n          return [obj[col] // row[column]\n          ];\n        }).join(';') // join the row with ';'\n        ];\n      }).join('\\n'); // end of row\n\n\n      return \"\".concat(colsHead, \"\\n\").concat(colsData);\n    }\n  }, {\n    key: \"setData\",\n    set: function set(data) {\n      if (!Array.isArray(data)) throw new Error('Invalid input type: setData(Array [])');\n      this._data = data;\n    }\n  }, {\n    key: \"getData\",\n    get: function get() {\n      return this._data;\n    }\n  }]);\n\n  return XlsExport;\n}();\n\nexport default XlsExport; // comment this line to babelize","map":null,"metadata":{},"sourceType":"module"}