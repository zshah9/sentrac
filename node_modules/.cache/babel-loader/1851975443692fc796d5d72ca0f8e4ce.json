{"ast":null,"code":"var _jsxFileName = \"/Users/zachary/capstone/madsense-app/src/VolumeTimeGraph.js\";\nimport { Typography } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport React from \"react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Label } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getMin(data) {\n  let local_min = Infinity;\n\n  for (let i = 0; i < data.length; i++) {\n    if (data[i].val < local_min) {\n      local_min = data[i].val;\n    }\n  }\n\n  return Math.round(local_min * 0.95 / 100) * 100;\n}\n\nfunction getMax(data) {\n  let local_max = 0;\n\n  for (let i = 0; i < data.length; i++) {\n    if (data[i].val > local_max) {\n      local_max = data[i].val;\n    }\n  }\n\n  return Math.round(local_max * 1.05 / 100) * 100;\n}\n\nfunction splitMeasurements(sensorLengths) {\n  if (sensorLengths.length <= 0) {\n    return [];\n  }\n\n  return sensorLengths.map((e, j) => {\n    return {\n      length: e,\n      sensor: j\n    };\n  });\n}\n\nexport default function VolumeTimeGraph(props) {\n  let minRange = getMin(props.data);\n  let maxRange = getMax(props.data);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      py: 5\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: 500,\n        marginLeft: 30\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        align: \"center\",\n        children: props.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n      width: 900,\n      height: 450,\n      data: props.data,\n      margin: {\n        top: 10,\n        right: 20,\n        left: 20,\n        bottom: 80\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"1 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"date\",\n        angle: -45,\n        dx: -25,\n        dy: 30,\n        children: /*#__PURE__*/_jsxDEV(Label, {\n          position: \"bottom\",\n          style: {\n            textAnchor: \"middle\"\n          },\n          dy: 55,\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        unit: \" mL\",\n        type: \"number\",\n        domain: [minRange, maxRange],\n        tickMargin: 10,\n        tickCount: 3,\n        width: 100,\n        children: /*#__PURE__*/_jsxDEV(Label, {\n          angle: 270,\n          position: \"left\",\n          style: {\n            textAnchor: \"middle\"\n          },\n          children: \"Volume\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"val\",\n        legendType: \"none\",\n        stroke: \"#8884d8\",\n        activeDot: {\n          r: 8\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_c = VolumeTimeGraph;\nexport function ShapeGraph(props) {\n  let recentSensorLengths = [];\n\n  if (props.measurements.lens > 0) {\n    recentSensorLengths = props.measurements.lens[props.measurements.lens.length - 1];\n  } else {\n    return;\n  }\n\n  let minRange = getMin(recentSensorLengths);\n  let maxRange = getMax(recentSensorLengths);\n  let data = splitMeasurements(props.measurements, recentSensorLengths);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      py: 5\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: 500,\n        marginLeft: 30\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h5\",\n        align: \"center\",\n        children: props.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n      width: 900,\n      height: 450,\n      data: data,\n      margin: {\n        top: 10,\n        right: 20,\n        left: 20,\n        bottom: 80\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"1 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"date\",\n        angle: -45,\n        dx: -25,\n        dy: 30,\n        children: /*#__PURE__*/_jsxDEV(Label, {\n          position: \"bottom\",\n          style: {\n            textAnchor: \"middle\"\n          },\n          dy: 55,\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        unit: \" cm\",\n        type: \"number\",\n        domain: [minRange, maxRange],\n        tickMargin: 10,\n        tickCount: 3,\n        width: 100,\n        children: /*#__PURE__*/_jsxDEV(Label, {\n          angle: 270,\n          position: \"left\",\n          style: {\n            textAnchor: \"middle\"\n          },\n          children: \"Volume\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"val\",\n        legendType: \"none\",\n        stroke: \"#8884d8\",\n        activeDot: {\n          r: 8\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n_c2 = ShapeGraph;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"VolumeTimeGraph\");\n$RefreshReg$(_c2, \"ShapeGraph\");","map":{"version":3,"sources":["/Users/zachary/capstone/madsense-app/src/VolumeTimeGraph.js"],"names":["Typography","Box","React","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Label","getMin","data","local_min","Infinity","i","length","val","Math","round","getMax","local_max","splitMeasurements","sensorLengths","map","e","j","sensor","VolumeTimeGraph","props","minRange","maxRange","py","width","marginLeft","title","top","right","left","bottom","textAnchor","r","ShapeGraph","recentSensorLengths","measurements","lens"],"mappings":"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","sourcesContent":["import { Typography } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport React from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  Label,\n} from \"recharts\";\n\nfunction getMin(data) {\n  let local_min = Infinity;\n  for (let i = 0; i < data.length; i++) {\n    if (data[i].val < local_min) {\n      local_min = data[i].val\n    }\n  }\n  return Math.round(local_min * 0.95 / 100) * 100\n}\n\nfunction getMax(data) {\n  let local_max = 0;\n  for (let i = 0; i < data.length; i++) {\n    if (data[i].val > local_max) {\n      local_max = data[i].val\n    }\n  }\n  return Math.round(local_max * 1.05 / 100) * 100\n}\n\nfunction splitMeasurements(sensorLengths) {\n\n  if (sensorLengths.length <= 0) {\n    return [];\n  }\n  return sensorLengths.map((e, j) => {\n    return { length: e, sensor: j };\n  });\n}\n\n\nexport default function VolumeTimeGraph(props) {\n  let minRange = getMin(props.data);\n  let maxRange = getMax(props.data);\n  \n  return (\n    <Box sx={{ py: 5 }}>\n      <Box sx={{ width: 500, marginLeft: 30 }}>\n        <Typography variant=\"h5\" align=\"center\">\n          {props.title}\n        </Typography>\n      </Box>\n      <LineChart\n        width={900}\n        height={450}\n        data={props.data}\n        margin={{\n          top: 10,\n          right: 20,\n          left: 20,\n          bottom: 80,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"1 1\" />\n        <XAxis \n          dataKey=\"date\"\n          angle={-45}\n          dx={-25}\n          dy={30}\n          >\n          <Label \n            position=\"bottom\" \n            style={{ textAnchor: \"middle\" }}\n            dy = {55}\n          >\n            Date\n          </Label>\n        </XAxis>\n        <YAxis \n          unit=' mL' \n          type=\"number\" \n          domain={[minRange, maxRange]}\n          tickMargin={10}\n          tickCount={3}\n          width={100} \n          >\n          <Label angle={270} position=\"left\" style={{ textAnchor: \"middle\" }}>\n            Volume\n          </Label>\n        </YAxis>\n        <Tooltip />\n        <Legend />\n        <Line\n          type=\"monotone\"\n          dataKey=\"val\"\n          legendType=\"none\"\n          stroke=\"#8884d8\"\n          activeDot={{ r: 8 }}\n        />\n      </LineChart>\n    </Box>\n  );\n}\n\nexport function ShapeGraph(props) {\n  let recentSensorLengths = [];\n  if (props.measurements.lens > 0) {\n    recentSensorLengths = props.measurements.lens[props.measurements.lens.length - 1]\n  } else { return; }\n  let minRange = getMin(recentSensorLengths);\n  let maxRange = getMax(recentSensorLengths);\n  let data = splitMeasurements(props.measurements, recentSensorLengths);\n  \n  return (\n    <Box sx={{ py: 5 }}>\n      <Box sx={{ width: 500, marginLeft: 30 }}>\n        <Typography variant=\"h5\" align=\"center\">\n          {props.title}\n        </Typography>\n      </Box>\n      <LineChart\n        width={900}\n        height={450}\n        data={data}\n        margin={{\n          top: 10,\n          right: 20,\n          left: 20,\n          bottom: 80,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"1 1\" />\n        <XAxis \n          dataKey=\"date\"\n          angle={-45}\n          dx={-25}\n          dy={30}\n          >\n          <Label \n            position=\"bottom\" \n            style={{ textAnchor: \"middle\" }}\n            dy = {55}\n          >\n            Date\n          </Label>\n        </XAxis>\n        <YAxis \n          unit=' cm' \n          type=\"number\" \n          domain={[minRange, maxRange]}\n          tickMargin={10}\n          tickCount={3}\n          width={100} \n          >\n          <Label angle={270} position=\"left\" style={{ textAnchor: \"middle\" }}>\n            Volume\n          </Label>\n        </YAxis>\n        <Tooltip />\n        <Legend />\n        <Line\n          type=\"monotone\"\n          dataKey=\"val\"\n          legendType=\"none\"\n          stroke=\"#8884d8\"\n          activeDot={{ r: 8 }}\n        />\n      </LineChart>\n    </Box>\n  );\n}"]},"metadata":{},"sourceType":"module"}