{"ast":null,"code":"import _regeneratorRuntime from \"/Users/zachary/capstone/madsense-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/zachary/capstone/madsense-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/zachary/capstone/madsense-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zachary/capstone/madsense-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// bluetooth code from p5ble\nexport var p5ble = /*#__PURE__*/function () {\n  function p5ble() {\n    _classCallCheck(this, p5ble);\n\n    this.device = null;\n    this.server = null;\n    this.service = null;\n    this.characteristics = [];\n    this.handleNotifications = null;\n  }\n\n  _createClass(p5ble, [{\n    key: \"connect\",\n    value: function connect(serviceUuid, callback) {\n      var _this = this;\n\n      console.log('Requesting Bluetooth Device...');\n      return callCallback(navigator.bluetooth.requestDevice({\n        filters: [{\n          services: [serviceUuid]\n        }]\n      }).then(function (device) {\n        _this.device = device;\n        console.log(\"Got device \".concat(device.name));\n        return device.gatt.connect();\n      }).then(function (server) {\n        _this.server = server;\n        console.log('Getting Service...');\n        return server.getPrimaryService(serviceUuid);\n      }).then(function (service) {\n        _this.service = service;\n        console.log('Getting Characteristics...');\n        return service.getCharacteristics();\n      }).then(function (characteristics) {\n        _this.characteristics = characteristics;\n        console.log('Got Characteristic');\n        return characteristics;\n      }).catch(function (error) {\n        console.error(\"Error: \".concat(error));\n      }), callback);\n    }\n  }, {\n    key: \"read\",\n    value: function () {\n      var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(characteristic, dataTypeOrcallback, cb) {\n        var callback, dataType, validChar;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (typeof dataTypeOrcallback === 'function') {\n                  callback = dataTypeOrcallback;\n                } else if (typeof dataTypeOrcallback === 'string') {\n                  dataType = dataTypeOrcallback;\n                }\n\n                if (typeof cb === 'function') {\n                  callback = cb;\n                }\n\n                if (!characteristic || !characteristic.uuid) console.error('The characteristic does not exist.');\n                validChar = this.characteristics.find(function (char) {\n                  return char.uuid === characteristic.uuid;\n                });\n\n                if (validChar) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", console.error('The characteristic does not exist.'));\n\n              case 6:\n                return _context.abrupt(\"return\", callCallback(characteristic.readValue().then(function (value) {\n                  return parseData(value, dataType);\n                }), callback));\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function read(_x, _x2, _x3) {\n        return _read.apply(this, arguments);\n      }\n\n      return read;\n    }()\n  }, {\n    key: \"write\",\n    value: function write(characteristic, inputValue) {\n      if (!characteristic || !characteristic.uuid) console.error('The characteristic does not exist.');\n      var validChar = this.characteristics.find(function (char) {\n        return char.uuid === characteristic.uuid;\n      });\n      if (!validChar) return console.error('The characteristic does not exist.');\n      var bufferToSend;\n\n      if (typeof inputValue === 'string') {\n        var encoder = new TextEncoder('utf-8');\n        bufferToSend = encoder.encode(inputValue);\n      } else bufferToSend = Uint8Array.of(inputValue);\n\n      console.log(\"Writing \".concat(inputValue, \" to Characteristic...\"));\n      return characteristic.writeValue(bufferToSend);\n    }\n  }, {\n    key: \"startNotifications\",\n    value: function () {\n      var _startNotifications = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(characteristic, handleNotifications, dataType) {\n        var validChar;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!characteristic || !characteristic.uuid) console.error('The characteristic does not exist.');\n                validChar = this.characteristics.find(function (char) {\n                  return char.uuid === characteristic.uuid;\n                });\n\n                if (validChar) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", console.error('The characteristic does not exist.'));\n\n              case 4:\n                _context2.next = 6;\n                return characteristic.startNotifications();\n\n              case 6:\n                console.log('> Notifications started');\n\n                this.handleNotifications = function (event) {\n                  var value = event.target.value;\n                  var parsedData = parseData(value, dataType);\n                  handleNotifications(parsedData);\n                };\n\n                return _context2.abrupt(\"return\", characteristic.addEventListener('characteristicvaluechanged', this.handleNotifications));\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function startNotifications(_x4, _x5, _x6) {\n        return _startNotifications.apply(this, arguments);\n      }\n\n      return startNotifications;\n    }()\n  }, {\n    key: \"stopNotifications\",\n    value: function () {\n      var _stopNotifications = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(characteristic) {\n        var validChar;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!characteristic || !characteristic.uuid) console.error('The characteristic does not exist.');\n                validChar = this.characteristics.find(function (char) {\n                  return char.uuid === characteristic.uuid;\n                });\n\n                if (validChar) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", console.error('The characteristic does not exist.'));\n\n              case 4:\n                _context3.prev = 4;\n                _context3.next = 7;\n                return characteristic.stopNotifications();\n\n              case 7:\n                if (!this.handleNotifications) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                console.log('> Notifications stopped');\n                return _context3.abrupt(\"return\", characteristic.removeEventListener('characteristicvaluechanged', this.handleNotifications));\n\n              case 10:\n                return _context3.abrupt(\"return\", console.log('> Notifications stopped'));\n\n              case 13:\n                _context3.prev = 13;\n                _context3.t0 = _context3[\"catch\"](4);\n                return _context3.abrupt(\"return\", console.error(\"Error: \".concat(_context3.t0)));\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[4, 13]]);\n      }));\n\n      function stopNotifications(_x7) {\n        return _stopNotifications.apply(this, arguments);\n      }\n\n      return stopNotifications;\n    }()\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (!this.device) return;\n      console.log('Disconnecting from Bluetooth Device...');\n\n      if (this.device.gatt.connected) {\n        this.device.gatt.disconnect();\n      } else {\n        console.log('> Bluetooth Device is already disconnected');\n      }\n    }\n  }, {\n    key: \"onDisconnected\",\n    value: function onDisconnected(handleDisconnected) {\n      if (!this.device) return console.error('There is no device connected.');\n      return this.device.addEventListener('gattserverdisconnected', handleDisconnected);\n    }\n  }, {\n    key: \"isConnected\",\n    value: function isConnected() {\n      if (!this.device) return false;\n\n      if (this.device.gatt.connected) {\n        return true;\n      }\n\n      return false;\n    }\n  }]);\n\n  return p5ble;\n}();\n\nfunction callCallback(promise, callback) {\n  if (callback) {\n    promise.then(function (result) {\n      callback(undefined, result);\n      return result;\n    }).catch(function (error) {\n      callback(error);\n      return error;\n    });\n  }\n\n  return promise;\n}\n\nfunction parseData(data, t, encoding) {\n  var type = t ? t.toLowerCase() : 'unit8';\n  var result;\n  var decoder;\n\n  switch (type) {\n    case 'unit8':\n      result = data.getUint8(0);\n      break;\n\n    case 'uint16':\n      result = data.getUint16(0);\n      break;\n\n    case 'uint32':\n      result = data.getUint32(0);\n      break;\n\n    case 'int8':\n      result = data.getInt8(0);\n      break;\n\n    case 'int16':\n      result = data.getInt16(0);\n      break;\n\n    case 'int32':\n      result = data.getInt32(0);\n      break;\n\n    case 'float32':\n      result = data.getFloat32(0, true); // littleEndian\n\n      break;\n\n    case 'float32-bigEndian':\n      result = data.getFloat32(0); // BigEndian\n\n      break;\n\n    case 'float64':\n      result = data.getFloat64(0, true); // littleEndian\n\n      break;\n\n    case 'float64-bigEndian':\n      result = data.getFloat64(0); // BigEndian\n\n      break;\n\n    case 'string':\n      // TODO: have the ability to choose different string encoding: like utf16\n      decoder = new TextDecoder(encoding || 'utf8');\n      result = decoder.decode(data);\n      break;\n\n    case 'custom':\n      // let the user do the parsing\n      result = data;\n      break;\n\n    default:\n      result = data.getUint8(0);\n      break;\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/Users/zachary/capstone/madsense-app/src/btUtils.js"],"names":["p5ble","device","server","service","characteristics","handleNotifications","serviceUuid","callback","console","log","callCallback","navigator","bluetooth","requestDevice","filters","services","then","name","gatt","connect","getPrimaryService","getCharacteristics","catch","error","characteristic","dataTypeOrcallback","cb","dataType","uuid","validChar","find","char","readValue","value","parseData","inputValue","bufferToSend","encoder","TextEncoder","encode","Uint8Array","of","writeValue","startNotifications","event","target","parsedData","addEventListener","stopNotifications","removeEventListener","connected","disconnect","handleDisconnected","promise","result","undefined","data","t","encoding","type","toLowerCase","decoder","getUint8","getUint16","getUint32","getInt8","getInt16","getInt32","getFloat32","getFloat64","TextDecoder","decode"],"mappings":"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","sourcesContent":["\n// bluetooth code from p5ble\n\nexport class p5ble {\n  constructor() {\n    this.device = null;\n    this.server = null;\n    this.service = null;\n    this.characteristics = [];\n    this.handleNotifications = null;\n  }\n\n  connect(serviceUuid, callback) {\n\n    console.log('Requesting Bluetooth Device...');\n\n    return callCallback(navigator.bluetooth.requestDevice({filters: [{services: [serviceUuid]}]})\n      .then((device) => {\n        this.device = device;\n        console.log(`Got device ${device.name}`);\n        return device.gatt.connect();\n      })\n      .then((server) => {\n        this.server = server;\n        console.log('Getting Service...');\n        return server.getPrimaryService(serviceUuid);\n      })\n      .then((service) => {\n        this.service = service;\n        console.log('Getting Characteristics...');\n        return service.getCharacteristics();\n      })\n      .then((characteristics) => {\n        this.characteristics = characteristics;\n        console.log('Got Characteristic');\n        return characteristics;\n      })\n      .catch((error) => {\n        console.error(`Error: ${error}`);\n      }), callback);\n  }\n\n  async read(characteristic, dataTypeOrcallback, cb) {\n    let callback;\n    let dataType;\n    if (typeof dataTypeOrcallback === 'function') {\n      callback = dataTypeOrcallback;\n    } else if (typeof dataTypeOrcallback === 'string') {\n      dataType = dataTypeOrcallback;\n    }\n    if (typeof cb === 'function') {\n      callback = cb;\n    }\n\n    if (!characteristic || !characteristic.uuid) console.error('The characteristic does not exist.');\n    const validChar = this.characteristics.find(char => char.uuid === characteristic.uuid);\n    if (!validChar) return console.error('The characteristic does not exist.');\n\n    return callCallback(characteristic.readValue()\n      .then(value => parseData(value, dataType)), callback);\n  }\n\n  write(characteristic, inputValue) {\n    if (!characteristic || !characteristic.uuid) console.error('The characteristic does not exist.');\n    const validChar = this.characteristics.find(char => char.uuid === characteristic.uuid);\n    if (!validChar) return console.error('The characteristic does not exist.');\n\n    let bufferToSend;\n    if (typeof inputValue === 'string') {\n      const encoder = new TextEncoder('utf-8');\n      bufferToSend = encoder.encode(inputValue);\n    } else bufferToSend = Uint8Array.of(inputValue);\n    console.log(`Writing ${inputValue} to Characteristic...`);\n    return characteristic.writeValue(bufferToSend);\n  }\n\n  async startNotifications(characteristic, handleNotifications, dataType) {\n    if (!characteristic || !characteristic.uuid) console.error('The characteristic does not exist.');\n    const validChar = this.characteristics.find(char => char.uuid === characteristic.uuid);\n    if (!validChar) return console.error('The characteristic does not exist.');\n\n    await characteristic.startNotifications();\n\n    console.log('> Notifications started');\n\n    this.handleNotifications = (event) => {\n      const { value } = event.target;\n      const parsedData = parseData(value, dataType);\n      handleNotifications(parsedData);\n    };\n\n    return characteristic.addEventListener('characteristicvaluechanged', this.handleNotifications);\n  }\n\n  async stopNotifications(characteristic) {\n    if (!characteristic || !characteristic.uuid) console.error('The characteristic does not exist.');\n    const validChar = this.characteristics.find(char => char.uuid === characteristic.uuid);\n    if (!validChar) return console.error('The characteristic does not exist.');\n\n    try {\n      await characteristic.stopNotifications();\n\n      if (this.handleNotifications) {\n        console.log('> Notifications stopped');\n        return characteristic.removeEventListener('characteristicvaluechanged', this.handleNotifications);\n      }\n      return console.log('> Notifications stopped');\n    } catch (error) {\n      return console.error(`Error: ${error}`);\n    }\n  }\n\n  disconnect() {\n    if (!this.device) return;\n    console.log('Disconnecting from Bluetooth Device...');\n    if (this.device.gatt.connected) {\n      this.device.gatt.disconnect();\n    } else {\n      console.log('> Bluetooth Device is already disconnected');\n    }\n  }\n\n  onDisconnected(handleDisconnected) {\n    if (!this.device) return console.error('There is no device connected.');\n    return this.device.addEventListener('gattserverdisconnected', handleDisconnected);\n  }\n\n  isConnected() {\n    if (!this.device) return false;\n    if (this.device.gatt.connected) {\n      return true;\n    }\n    return false;\n  }\n}\n\nfunction callCallback(promise, callback) {\n  if (callback) {\n    promise\n      .then((result) => {\n        callback(undefined, result);\n        return result;\n      })\n      .catch((error) => {\n        callback(error);\n        return error;\n      });\n  }\n  return promise;\n}\n\nfunction parseData(data, t, encoding) {\n  const type = t ? t.toLowerCase() : 'unit8';\n  let result;\n  let decoder;\n  switch (type) {\n    case 'unit8':\n      result = data.getUint8(0);\n      break;\n\n    case 'uint16':\n      result = data.getUint16(0);\n      break;\n\n    case 'uint32':\n      result = data.getUint32(0);\n      break;\n\n    case 'int8':\n      result = data.getInt8(0);\n      break;\n\n    case 'int16':\n      result = data.getInt16(0);\n      break;\n\n    case 'int32':\n      result = data.getInt32(0);\n      break;\n\n    case 'float32':\n      result = data.getFloat32(0, true); // littleEndian\n      break;\n\n    case 'float32-bigEndian':\n      result = data.getFloat32(0); // BigEndian\n      break;\n\n    case 'float64':\n      result = data.getFloat64(0, true); // littleEndian\n      break;\n\n    case 'float64-bigEndian':\n      result = data.getFloat64(0); // BigEndian\n      break;\n\n    case 'string':\n      // TODO: have the ability to choose different string encoding: like utf16\n      decoder = new TextDecoder(encoding || 'utf8');\n      result = decoder.decode(data);\n      break;\n\n    case 'custom':\n      // let the user do the parsing\n      result = data;\n      break;\n\n    default:\n      result = data.getUint8(0);\n      break;\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}