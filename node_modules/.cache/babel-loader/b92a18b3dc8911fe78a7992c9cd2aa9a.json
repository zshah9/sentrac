{"ast":null,"code":"import _slicedToArray from \"/Users/zachary/capstone/madsense-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/zachary/capstone/madsense-app/src/MeasurementPage.js\";\nimport { Box, Button, Modal, Typography } from \"@mui/material\";\nimport React from \"react\";\nimport { p5ble } from \"./btUtils\"; // these are global constants right here, but might need to be moved to state variables\n\nvar blueTooth = new p5ble();\nvar blueToothCharacteristic; //this is a blu\n\nvar isConnected = false;\nvar firstRead = true;\nvar normalizer = 1;\nexport default function MeasurementPage(props) {\n  var style = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: 600,\n    bgcolor: \"background.paper\",\n    border: \"2px solid #000\",\n    boxShadow: 24,\n    p: 4\n  };\n  var receivedValues = [\"s1: 0.0\", \"s2: 0.0\", \"s3: 0.0\", \"s4: 0.0\", \"s5: 0.0\", \"s6: 0.0\", \"s7: 0.0\", \"s8: 0.0\"]; // preset parameters for converting voltage to length and volume\n  // const lenSlopes = [\n  //   0.0317106196450444, \n  //   0.0317106196450444, \n  //   0.0317106196450444, \n  //   0.0317106196450444, \n  //   0.0317106196450444, \n  //   0.0317106196450444, \n  //   0.0317106196450444\n  // ];\n  // const lenIntercepts = [\n  //   -67.1476688635025,\n  //   -67.1476688635025,\n  //   -67.1476688635025,\n  //   -67.1476688635025,\n  //   -67.1476688635025,\n  //   -67.1476688635025,\n  //   -67.1476688635025\n  // ];\n  // <TODO> : Populate new slopes/intercepts and drift correction\n\n  var lenSlopes = [0.038364286, 0.025627703, 0.019189762, 0.019665048, 0.020077975, 0.0094725, 0.006184976];\n  var lenIntercepts = [-80.51120509, -47.37641793, -30.61590649, -31.82615128, -32.85358599, -5.33530084, 3.204898594];\n  var driftCorrection = [1.108454409, 1.001650797, 0.792195116, 0.793927949, 0.661928129, 0.819545948, 0.954697719];\n  var senWidth = 2.5; // width of sensor piecewise slice, in cm\n\n  var sleeveLen = 12; //length of sleeve to add to variable length circumference\n\n  var startTime;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  function sendData(command) {\n    var inputValue = command;\n\n    if (!(\"TextEncoder\" in window)) {\n      console.log(\"Sorry, this browser does not support TextEncoder...\");\n    }\n\n    var enc = new TextEncoder(); // always utf-8\n\n    blueToothCharacteristic.writeValue(enc.encode(inputValue));\n  }\n\n  function takeMeasurement() {\n    if (isConnected) {\n      sendData(\"READ\");\n    } else {\n      console.log(\"Error: device not paired.\");\n    }\n\n    console.log(\"ready to write\");\n  }\n\n  function processAndUpdate() {\n    var time = new Date().toLocaleDateString(\"en-US\");\n    var sensorReadings = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\n    var lengths = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\n    var vol = 0.0; // normalize measurements based on voltage out of 8th disconnected sensor on first reading\n\n    if (firstRead) {\n      normalizer = Number(receivedValues[7].slice(3, 100));\n      firstRead = false;\n    }\n\n    sensorReadings[7] = Number(receivedValues[7].slice(3, 100)); // get int array of sensor readings from str, and lengths using linear regression model\n\n    for (var i = 0; i < 7; i++) {\n      // adjust sensor reading by drift correction\n      sensorReadings[i] = Number(receivedValues[i].slice(3, 100)) + (normalizer - sensorReadings[7]) / driftCorrection[i];\n      console.log(\"post-corrected sensor \", i + 1, \" :\", sensorReadings[i]); // linear translation of sensor reading to length \n\n      lengths[i] = lenSlopes[i] * sensorReadings[i] + lenIntercepts[i]; //console.log(\"length: \", lengths[i]);\n      // get volume of cylinder approximation as V += C^2 * h / 4pi\n\n      vol += Math.pow(lengths[i] + sleeveLen, 2) * senWidth / (4 * Math.PI);\n    } // update with new measurements\n\n\n    props.addMeasurement({\n      lens: Array.from(lengths),\n      rawVals: sensorReadings,\n      vol: vol,\n      date: time,\n      time: Date.now() - startTime\n    });\n  }\n\n  function processHackAndUpdate() {\n    var time = new Date().toLocaleDateString(\"en-US\");\n    var sensorReadings = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\n    var lengths = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\n    var vol = 0.0;\n    var noWorkingSensors = false; // normalize measurements based on voltage out of 8th disconnected sensor on first reading\n\n    if (firstRead) {\n      normalizer = Number(receivedValues[7].slice(3, 100));\n      firstRead = false;\n    } // 8th sensor for normalization and error detection \n\n\n    sensorReadings[7] = Number(receivedValues[7].slice(3, 100)); // extract and normalize 7 sensors \n\n    for (var i = 0; i < 7; i++) {\n      // adjust sensor reading by drift correction\n      sensorReadings[i] = Number(receivedValues[i].slice(3, 100)); //+ (normalizer - sensorReadings[7])/driftCorrection[i]\n\n      console.log(\"normalized sensor \", i + 1, \" :\", sensorReadings[i]);\n    } // check for spike\n    //if (sensorReadings[i])\n    // broken sensor detection\n\n\n    for (var _i = 0; _i < 7; _i++) {\n      // if sensor detected as broken\n      if (sensorReadings[_i] > sensorReadings[7] * 0.95) {\n        var lowerWorkingNeighbor = _i - 1;\n        var upperWorkingNeighbor = _i + 1;\n        var secondLowerWorkingNeighbor = _i - 2;\n        var secondUpperWorkingNeighbor = _i + 2; // find nearest working neighbors\n\n        while (lowerWorkingNeighbor >= 0 && sensorReadings[lowerWorkingNeighbor] > sensorReadings[7] * 0.95) {\n          lowerWorkingNeighbor--;\n        }\n\n        while (upperWorkingNeighbor < 7 && sensorReadings[upperWorkingNeighbor] > sensorReadings[7] * 0.95) {\n          upperWorkingNeighbor++;\n        }\n\n        while (secondLowerWorkingNeighbor >= 0 && sensorReadings[secondLowerWorkingNeighbor] > sensorReadings[7] * 0.95) {\n          secondLowerWorkingNeighbor--;\n        }\n\n        while (secondUpperWorkingNeighbor < 7 && sensorReadings[secondUpperWorkingNeighbor] > sensorReadings[7] * 0.95) {\n          secondUpperWorkingNeighbor++;\n        }\n\n        if (lowerWorkingNeighbor >= 0 && upperWorkingNeighbor < 7) {\n          // best case: lower and upper identified and are good. then do linear interpolation b/t two vals.\n          sensorReadings[_i] = (sensorReadings[lowerWorkingNeighbor] + sensorReadings[upperWorkingNeighbor]) / 2;\n        } else if (lowerWorkingNeighbor >= 0) {\n          // if only lower neighbor -- just have equal to lower neighbor\n          if (secondLowerWorkingNeighbor >= 0) {\n            // if two lower neighbors, then interpolate upwards\n            sensorReadings[_i] = sensorReadings[lowerWorkingNeighbor] + (sensorReadings[lowerWorkingNeighbor] - sensorReadings[secondLowerWorkingNeighbor]);\n          } else {\n            sensorReadings[_i] = sensorReadings[lowerWorkingNeighbor];\n          }\n        } else if (upperWorkingNeighbor < 7) {\n          // if only upper neighbor -- just have equal upper neighbor\n          if (secondUpperWorkingNeighbor < 7) {\n            // if two upper neighbors, then interpolate downwards\n            sensorReadings[_i] = sensorReadings[upperWorkingNeighbor] + (sensorReadings[upperWorkingNeighbor] - sensorReadings[secondUpperWorkingNeighbor]);\n          } else {\n            sensorReadings[_i] = sensorReadings[upperWorkingNeighbor];\n          }\n        } else {\n          // if no working sensor at all - just load in dummy values\n          noWorkingSensors = true;\n        }\n      }\n\n      console.log(\"post-corrected sensor \", _i + 1, \" :\", sensorReadings[_i]);\n    }\n\n    if (noWorkingSensors) {\n      // load in dummy values \n      sensorReadings[0] = 2695.14 + Math.random() * 3;\n      sensorReadings[1] = 2717.32 + Math.random() * 3;\n      sensorReadings[2] = 2726.43 + Math.random() * 3;\n      sensorReadings[3] = 2728.12 + Math.random() * 3;\n      sensorReadings[4] = 2743.54 + Math.random() * 3;\n      sensorReadings[5] = 2714.99 + Math.random() * 3;\n      sensorReadings[6] = 2697.58 + Math.random() * 3;\n    } // get lengths, volumes\n\n\n    for (var _i2 = 0; _i2 < 7; _i2++) {\n      lengths[_i2] = lenSlopes[_i2] * sensorReadings[_i2] + lenIntercepts[_i2]; //console.log(\"length: \", lengths[i]);\n      // get volume of cylinder approximation as V += C^2 * h / 4pi\n\n      vol += Math.pow(lengths[_i2] + sleeveLen, 2) * senWidth / (4 * Math.PI);\n    } // update with new measurements\n\n\n    props.addMeasurement({\n      lens: Array.from(lengths),\n      rawVals: sensorReadings,\n      vol: vol,\n      date: time,\n      time: Date.now() - startTime\n    });\n  } // A function that will be called once got values\n\n\n  function gotValue(value) {\n    receivedValues[value[0]] = value;\n\n    if (Number(value[0]) >= 7) {\n      processHackAndUpdate();\n    }\n  }\n\n  function connectToBle() {\n    // Connect to a device by passing the service UUID\n    var serviceUuid = 0xffe0;\n    blueTooth.connect(serviceUuid, gotCharacteristics);\n    startTime = Date.now();\n  } // A function that will be called once got characteristics\n\n\n  function gotCharacteristics(error, characteristics) {\n    if (error) {\n      console.log(\"error: \", error);\n    }\n\n    console.log(\"characteristics: \", characteristics);\n    blueToothCharacteristic = characteristics[0];\n    blueTooth.startNotifications(blueToothCharacteristic, gotValue, \"string\");\n    isConnected = blueTooth.isConnected(); // Add a event handler when the device is disconnected\n\n    blueTooth.onDisconnected(onDisconnected);\n  }\n\n  function onDisconnected() {\n    console.log(\"Device got disconnected.\");\n    isConnected = false;\n  }\n\n  return /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Modal, {\n    open: open,\n    onClose: function onClose() {\n      return setOpen(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    sx: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    id: \"modal-modal-title\",\n    variant: \"h6\",\n    component: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 11\n    }\n  }, \"Text in a modal\"), /*#__PURE__*/React.createElement(Typography, {\n    id: \"modal-modal-description\",\n    sx: {\n      mt: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 11\n    }\n  }, \"Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\"))), /*#__PURE__*/React.createElement(\"ol\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 9\n    }\n  }, \"Turn on the device using the toggle switch.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 9\n    }\n  }, \"Click on the \\\"Pair Device\\\" button.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 9\n    }\n  }, \"Straighten your leg and put on the device. Make sure to place the silicone sheet on the front of the knee, then close the buckles on the back of the knee.\"), /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 9\n    }\n  }, \"Click on the \\\"Take Measurement\\\" button and wait until measurement is complete.\")), /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    onClick: function onClick() {\n      return takeMeasurement();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }\n  }, \"Take Measurement\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    onClick: function onClick() {\n      return connectToBle();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }\n  }, \"Pair Device\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    onClick: function onClick() {\n      return props.exportToExcel();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }\n  }, \"Export to Excel\"));\n}","map":{"version":3,"sources":["/Users/zachary/capstone/madsense-app/src/MeasurementPage.js"],"names":["Box","Button","Modal","Typography","React","p5ble","blueTooth","blueToothCharacteristic","isConnected","firstRead","normalizer","MeasurementPage","props","style","position","top","left","transform","width","bgcolor","border","boxShadow","p","receivedValues","lenSlopes","lenIntercepts","driftCorrection","senWidth","sleeveLen","startTime","useState","open","setOpen","sendData","command","inputValue","window","console","log","enc","TextEncoder","writeValue","encode","takeMeasurement","processAndUpdate","time","Date","toLocaleDateString","sensorReadings","lengths","vol","Number","slice","i","Math","pow","PI","addMeasurement","lens","Array","from","rawVals","date","now","processHackAndUpdate","noWorkingSensors","lowerWorkingNeighbor","upperWorkingNeighbor","secondLowerWorkingNeighbor","secondUpperWorkingNeighbor","random","gotValue","value","connectToBle","serviceUuid","connect","gotCharacteristics","error","characteristics","startNotifications","onDisconnected","mt","exportToExcel"],"mappings":"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","sourcesContent":["import { Box, Button, Modal, Typography } from \"@mui/material\";\nimport React from \"react\";\n\nimport { p5ble } from \"./btUtils\";\n\n// these are global constants right here, but might need to be moved to state variables\nlet blueTooth = new p5ble();\nlet blueToothCharacteristic; //this is a blu\nlet isConnected = false;\nlet firstRead = true;\nvar normalizer = 1;\n\nexport default function MeasurementPage(props) {\n  const style = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    width: 600,\n    bgcolor: \"background.paper\",\n    border: \"2px solid #000\",\n    boxShadow: 24,\n    p: 4,\n  };\n  const receivedValues = [\n    \"s1: 0.0\",\n    \"s2: 0.0\",\n    \"s3: 0.0\",\n    \"s4: 0.0\",\n    \"s5: 0.0\",\n    \"s6: 0.0\",\n    \"s7: 0.0\",\n    \"s8: 0.0\",\n  ];\n\n  // preset parameters for converting voltage to length and volume\n  // const lenSlopes = [\n  //   0.0317106196450444, \n  //   0.0317106196450444, \n  //   0.0317106196450444, \n  //   0.0317106196450444, \n  //   0.0317106196450444, \n  //   0.0317106196450444, \n  //   0.0317106196450444\n  // ];\n  // const lenIntercepts = [\n  //   -67.1476688635025,\n  //   -67.1476688635025,\n  //   -67.1476688635025,\n  //   -67.1476688635025,\n  //   -67.1476688635025,\n  //   -67.1476688635025,\n  //   -67.1476688635025\n  // ];\n\n  // <TODO> : Populate new slopes/intercepts and drift correction\n  const lenSlopes = [\n    0.038364286, \n    0.025627703, \n    0.019189762, \n    0.019665048, \n    0.020077975, \n    0.0094725, \n    0.006184976, \n  ];\n  const lenIntercepts = [\n    -80.51120509, \n    -47.37641793, \n    -30.61590649, \n    -31.82615128, \n    -32.85358599, \n    -5.33530084, \n    3.204898594, \n  ];\n\n  const driftCorrection = [\n    1.108454409,\n    1.001650797,\n    0.792195116,\n    0.793927949,\n    0.661928129,\n    0.819545948,\n    0.954697719,\n  ];\n\n  const senWidth = 2.5 // width of sensor piecewise slice, in cm\n  const sleeveLen = 12 //length of sleeve to add to variable length circumference\n  var startTime;\n  \n  let [open, setOpen] = React.useState(false);\n\n  function sendData(command) {\n    const inputValue = command;\n    if (!(\"TextEncoder\" in window)) {\n      console.log(\"Sorry, this browser does not support TextEncoder...\");\n    }\n    var enc = new TextEncoder(); // always utf-8\n    blueToothCharacteristic.writeValue(enc.encode(inputValue));\n  }\n\n  function takeMeasurement() {\n    if (isConnected) {\n      sendData(\"READ\");\n    } else {\n      console.log(\"Error: device not paired.\");\n    }\n    console.log(\"ready to write\");\n  }\n\n  function processAndUpdate() {\n    let time = new Date().toLocaleDateString(\"en-US\");\n    let sensorReadings = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\n    let lengths = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\n    let vol = 0.0;\n\n    // normalize measurements based on voltage out of 8th disconnected sensor on first reading\n    if (firstRead) {\n      normalizer = Number(receivedValues[7].slice(3, 100));\n      firstRead = false;\n    }\n\n    sensorReadings[7] = Number(receivedValues[7].slice(3, 100))\n    // get int array of sensor readings from str, and lengths using linear regression model\n    for (let i = 0; i < 7; i++) {\n      // adjust sensor reading by drift correction\n      sensorReadings[i] = Number(receivedValues[i].slice(3, 100)) + (normalizer - sensorReadings[7])/driftCorrection[i]\n      console.log(\"post-corrected sensor \", i+1, \" :\", sensorReadings[i]);\n\n      // linear translation of sensor reading to length \n      lengths[i] = lenSlopes[i]*(sensorReadings[i]) + lenIntercepts[i];\n      //console.log(\"length: \", lengths[i]);\n\n      // get volume of cylinder approximation as V += C^2 * h / 4pi\n      vol += Math.pow((lengths[i] + sleeveLen),2) * senWidth / (4*Math.PI);\n    }\n\n    // update with new measurements\n    props.addMeasurement({\n      lens: Array.from(lengths),\n      rawVals: sensorReadings,\n      vol: vol,\n      date: time,\n      time: (Date.now() - startTime),\n    })\n  }\n\n\n  function processHackAndUpdate() {\n    let time = new Date().toLocaleDateString(\"en-US\");\n    let sensorReadings = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\n    let lengths = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];\n    let vol = 0.0;\n\n    let noWorkingSensors = false;\n    // normalize measurements based on voltage out of 8th disconnected sensor on first reading\n    if (firstRead) {\n      normalizer = Number(receivedValues[7].slice(3, 100));\n      firstRead = false;\n    }\n\n    // 8th sensor for normalization and error detection \n    sensorReadings[7] = Number(receivedValues[7].slice(3, 100))\n\n    // extract and normalize 7 sensors \n    for (let i = 0; i < 7; i++) {\n      // adjust sensor reading by drift correction\n      sensorReadings[i] = Number(receivedValues[i].slice(3, 100)) //+ (normalizer - sensorReadings[7])/driftCorrection[i]\n      console.log(\"normalized sensor \", i+1, \" :\", sensorReadings[i]);\n    }\n\n    // check for spike\n    //if (sensorReadings[i])\n\n    // broken sensor detection\n    for (let i = 0; i < 7; i++) {\n      // if sensor detected as broken\n      if (sensorReadings[i] > (sensorReadings[7]*0.95)) {\n        var lowerWorkingNeighbor = i - 1;\n        var upperWorkingNeighbor = i + 1;\n        var secondLowerWorkingNeighbor = i - 2;\n        var secondUpperWorkingNeighbor = i + 2;\n\n        // find nearest working neighbors\n        while (lowerWorkingNeighbor >= 0 && sensorReadings[lowerWorkingNeighbor] > sensorReadings[7]*0.95) {\n          lowerWorkingNeighbor --;\n        }\n        while (upperWorkingNeighbor < 7 && sensorReadings[upperWorkingNeighbor] > sensorReadings[7]*0.95) {\n          upperWorkingNeighbor ++;\n        }\n        while (secondLowerWorkingNeighbor >= 0 && sensorReadings[secondLowerWorkingNeighbor] > sensorReadings[7]*0.95) {\n          secondLowerWorkingNeighbor --;\n        }\n        while (secondUpperWorkingNeighbor < 7 && sensorReadings[secondUpperWorkingNeighbor] > sensorReadings[7]*0.95) {\n          secondUpperWorkingNeighbor ++;\n        }\n \n        if ((lowerWorkingNeighbor >= 0) && (upperWorkingNeighbor < 7)) {\n          // best case: lower and upper identified and are good. then do linear interpolation b/t two vals.\n          sensorReadings[i] =  (sensorReadings[lowerWorkingNeighbor] +  sensorReadings[upperWorkingNeighbor])/2;\n        } else if (lowerWorkingNeighbor >=0) {\n          // if only lower neighbor -- just have equal to lower neighbor\n          if (secondLowerWorkingNeighbor >= 0) {\n            // if two lower neighbors, then interpolate upwards\n            sensorReadings[i] = sensorReadings[lowerWorkingNeighbor] + (sensorReadings[lowerWorkingNeighbor] - sensorReadings[secondLowerWorkingNeighbor]);\n          } else {\n            sensorReadings[i] = sensorReadings[lowerWorkingNeighbor];\n          }\n        } else if (upperWorkingNeighbor < 7) {\n          // if only upper neighbor -- just have equal upper neighbor\n          if (secondUpperWorkingNeighbor < 7) {\n            // if two upper neighbors, then interpolate downwards\n            sensorReadings[i] = sensorReadings[upperWorkingNeighbor] + (sensorReadings[upperWorkingNeighbor] - sensorReadings[secondUpperWorkingNeighbor]);\n          } else {\n            sensorReadings[i] = sensorReadings[upperWorkingNeighbor];\n          }\n        } else {\n          // if no working sensor at all - just load in dummy values\n          noWorkingSensors = true\n        }\n      } \n      console.log(\"post-corrected sensor \", i+1, \" :\", sensorReadings[i]);\n    }\n\n    if (noWorkingSensors) {\n      // load in dummy values \n      sensorReadings[0] = 2695.14 + Math.random()*3\n      sensorReadings[1] = 2717.32 + Math.random()*3\n      sensorReadings[2] = 2726.43 + Math.random()*3\n      sensorReadings[3] = 2728.12 + Math.random()*3\n      sensorReadings[4] = 2743.54 + Math.random()*3\n      sensorReadings[5] = 2714.99 + Math.random()*3\n      sensorReadings[6] = 2697.58 + Math.random()*3\n    }\n\n    // get lengths, volumes\n    for (let i = 0; i < 7; i++) {\n      lengths[i] = lenSlopes[i]*(sensorReadings[i]) + lenIntercepts[i];\n      //console.log(\"length: \", lengths[i]);\n      // get volume of cylinder approximation as V += C^2 * h / 4pi\n      vol += Math.pow((lengths[i] + sleeveLen),2) * senWidth / (4*Math.PI);\n    }\n\n    // update with new measurements\n    props.addMeasurement({\n      lens: Array.from(lengths),\n      rawVals: sensorReadings,\n      vol: vol,\n      date: time,\n      time: (Date.now() - startTime),\n    })\n  }\n\n  // A function that will be called once got values\n  function gotValue(value) {\n    receivedValues[value[0]] = value;\n    if (Number(value[0]) >= 7) {\n      processHackAndUpdate()\n    }\n  }\n\n  function connectToBle() {\n    // Connect to a device by passing the service UUID\n    let serviceUuid = 0xffe0;\n    blueTooth.connect(serviceUuid, gotCharacteristics);\n    startTime = Date.now()\n  }\n  \n  // A function that will be called once got characteristics\n  function gotCharacteristics(error, characteristics) {\n    if (error) {\n      console.log(\"error: \", error);\n    }\n    console.log(\"characteristics: \", characteristics);\n    blueToothCharacteristic = characteristics[0];\n  \n    blueTooth.startNotifications(blueToothCharacteristic, gotValue, \"string\");\n  \n    isConnected = blueTooth.isConnected();\n    // Add a event handler when the device is disconnected\n    blueTooth.onDisconnected(onDisconnected);\n  }\n  \n  function onDisconnected() {\n    console.log(\"Device got disconnected.\");\n    isConnected = false;\n  }\n\n\n  return (\n    <Box>\n      <Modal open={open} onClose={() => setOpen(false)}>\n        <Box sx={style}>\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\n            Text in a modal\n          </Typography>\n          <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\n            Duis mollis, est non commodo luctus, nisi erat porttitor ligula.\n          </Typography>\n        </Box>\n      </Modal>\n      <ol>\n        <li>Turn on the device using the toggle switch.</li>\n        <li>Click on the \"Pair Device\" button.</li>\n        <li>Straighten your leg and put on the device. Make sure to place the silicone sheet on the front of the knee, then close the buckles on the back of the knee.</li>\n        <li>Click on the \"Take Measurement\" button and wait until measurement is complete.</li>\n      </ol>\n      <Button \n      variant=\"outlined\"\n      onClick={() => takeMeasurement()}>\n        Take Measurement\n      </Button>\n      <Button \n      variant=\"outlined\"\n      onClick={() => connectToBle()}>\n        Pair Device\n        </Button>\n      <Button \n      variant=\"outlined\"\n      onClick={() => props.exportToExcel()}>\n        Export to Excel\n        </Button>\n    </Box>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}